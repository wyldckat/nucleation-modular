#!/bin/bash

#-- USER INTERFACE FUNCTIONS ------------------------------------------------------
#list of functions herein:
#     cancel_installer()
#     show_intro_dialog()
#     pick_openfoam_path()
#     should_keep_inst_log()
#     define_install_mode()
#     pick_openfoam_version()
#     define_base_custom_options()
#     define_custom_optionals()
#     define_paraview_options()
#     pick_download_mirror()
#     final_interface_before_install()

#global variables used by this script:
#   INST_SYSTEM - System variant for installation - defined in the master script

#Code -----------------------------------------
echo "Sourcing User Interface functions..."

GUI_BACKTITLE="Unofficial OpenFOAM Installer (${INST_SYSTEM} variant)"

#source system related script
if [ "x$SYSTEM_VERSION" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/common/${SYSTEM_VERSION}/user_interface
else
  echo "The variable SYSTEM_VERSION and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi


#-- GUI UTILITY FUNCTIONS ------------------------------------------------------
function cancel_installer()
{
    dialog --backtitle "$GUI_BACKTITLE" \
--title "Cancel the Installer" \
--yesno 'Are you sure that you want to cancel the installer ??' 5 60 ;
    if [ x"$?" == x"0" ]; then
        clear
        exit
    fi
}
#-- GUI END UTILITY FUNCTIONS --------------------------------------------------

#FUNCTIONS ------------------------------------------------------------------------------

function show_intro_dialog()
{
#Presentation dialog
dialog --title "$GUI_BACKTITLE" \
--msgbox "-------------------------------------------------------------------\n
| =========              |\n
| \\      / F ield        | Unofficial OpenFOAM Installer (${INST_SYSTEM} variant)\n
|  \\    /  O peration    | Licensed under GPLv3\n
|   \\  /   A nd          | Web: ${MAIN_PAGE_URL}\n
|    \\/    M anipulation | By: Fabio Canesin and Bruno Santos\n
|                        | Based on original work from Mads Reck\n
-----------------------------------------------------------------------" 12 80
}

function pick_openfoam_path()
{
  #Choose path to install OF, default is already set
  while : ; do
    PATHOF=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE" \
    --inputbox 'Choose the install path: < default: ~/OpenFOAM >' 8 60 ~/OpenFOAM ) 

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

function should_keep_inst_log()
{
  #Logging option Dialog
  while : ; do
    LOG_OUTPUTS=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"   \
    --menu 'Do you want to save a log of the script? < default: Yes >' 0 40 0 \
    'Yes'   '' \
    'No' '' )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

function define_install_mode()
{
  #Installation mode dialog
  while : ; do
    INSTALLMODE=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"    \
    --radiolist 'Choose the Install Mode: < default: fresh >' 11 50 4 \
    'fresh'    'Make new Install' on \
    'update'   'Update current install'  off \
    'server'   'ParaView with: -GUI +MPI'  off \
    'custom'   'Use this only after installation'  off )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

#Choose OpenFOAM version to be installed
function pick_openfoam_version()
{
  #OpenFOAM version to be installed - defaults for now <- TODO add 1.7.x
  OF_LONG_VERSION="1.6.x"
  OF_SHORT_VERSION="16x"
}

#Handle custom options
function define_base_custom_options()
{
  if [ "x$INSTALLMODE" == "xcustom" ]; then

    CUSTOMOPTS_OFOPTIONALS=No
    CUSTOMOPTS_PARAVIEW=No

    while : ; do
      CUSTOMOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Build only parts, excluding OpenFOAM: < Space to select ! >" 15 65 2 \
      1 "Build OpenFOAM optionals" off \
      2 "Build ParaView with(out) Qt" off )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from PVSETTINGSOPTS
    for setting in $CUSTOMOPTS ; do
      if [ $setting == 1 ] ; then CUSTOMOPTS_OFOPTIONALS=Yes ; fi
      if [ $setting == 2 ] ; then CUSTOMOPTS_PARAVIEW=Yes ; fi
    done

    if [ "x$CUSTOMOPTS_OFOPTIONALS" == "xNo" -a "x$CUSTOMOPTS_PARAVIEW" == "xNo" ]; then
      clear
      echo "Nothing to do... exiting."
      exit 0
    fi

  elif [ "x$INSTALLMODE" != "xupdate" ]; then

    CUSTOMOPTS_OFOPTIONALS=Yes
    CUSTOMOPTS_PARAVIEW=Yes

  fi
}


#Define options for OpenFOAM optionals
function define_custom_optionals()
{
  DOUPGRADE=No ; BUILD_DOCUMENTATION=
  USE_ALIAS_FOR_BASHRC=No ; USE_OF_GCC=No
  BUILD_CCM26TOFOAM=No

  if [ "x$CUSTOMOPTS_OFOPTIONALS" == "xYes" ]; then
    #Settings choosing Dialog
    while : ; do
      SETTINGSOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Choose Install settings: < Space to select ! >" 15 50 5 \
      1 "Do apt-get upgrade" off \
      2 "Build OpenFOAM docs" off \
      3 "Use startFoam alias" on \
      4 "Use OpenFOAM gcc compiler" on \
      5 "Build ccm26ToFoam" off )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from SETTINGSOPTS
    for setting in $SETTINGSOPTS ; do
      if [ $setting == 1 ] ; then DOUPGRADE=Yes ; fi
      if [ $setting == 2 ] ; then BUILD_DOCUMENTATION=doc ; fi
      if [ $setting == 3 ] ; then USE_ALIAS_FOR_BASHRC=Yes ; fi
      if [ $setting == 4 ] ; then USE_OF_GCC=Yes ; fi
      if [ $setting == 5 ] ; then BUILD_CCM26TOFOAM=Yes ; fi
    done
  fi
}


#Define options for OpenFOAM optionals
function define_paraview_options()
{
  BUILD_QT=No
  BUILD_PARAVIEW=No
  BUILD_PARAVIEW_WITH_GUI=No
  BUILD_PARAVIEW_WITH_MPI=No
  BUILD_PARAVIEW_WITH_PYTHON=No
  BUILD_PARAVIEW_WITH_OSMESA=No

  #ParaView configurations for a fresh install
  if [ "x$INSTALLMODE" == "xfresh" -o "x$CUSTOMOPTS_PARAVIEW" == "xYes" ]; then
    while : ; do
      PVSETTINGSOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Choose ParaView settings: < Space to select ! >" 16 59 6 \
      1 "Do custom build of Qt 4.3.5 ?" off \
      2 "Do custom build of ParaView ?" off \
      3 "Build ParaView with GUI ?" on \
      4 "Build ParaView with Python support ?" off \
      5 "Build ParaView with MPI support ?" off \
      6 "Build ParaView with OSMesa (without GUI) ?" off )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from PVSETTINGSOPTS
    for setting in $PVSETTINGSOPTS ; do
      if [ $setting == 1 ] ; then BUILD_QT=Yes ; fi
      if [ $setting == 2 ] ; then BUILD_PARAVIEW=Yes ; fi
      if [ $setting == 3 ] ; then BUILD_PARAVIEW_WITH_GUI=Yes ; fi
      if [ $setting == 4 ] ; then BUILD_PARAVIEW_WITH_PYTHON=Yes ; fi
      if [ $setting == 5 ] ; then BUILD_PARAVIEW_WITH_MPI=Yes ; fi
      if [ $setting == 6 ] ; then BUILD_PARAVIEW_WITH_OSMESA=Yes ; fi
    done
  fi
}


#Mirror selection dialog
function pick_download_mirror()
{

  while : ; do
    mirror=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"   \
    --menu 'Choose your location for mirror selection? < default: autodetect >' 0 40 0 \
    findClosest 'Autodetect closest' \
    optusnet 'Australia' \
    ufpr 'Brazil' \
    nchc 'China/Taiwan' \
    mesh 'Germany' \
    garr 'Italy' \
    jaist 'Japan' \
    puzzle 'Switzerland' \
    kent 'UK' \
    internap 'US' )
    
    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done

  #Detect and take care of fastest mirror
  if [ "x$mirror" == "xfindClosest" ]; then
    clear

    (
      echo "Searching for the closest mirror..."
      echo "It can take from 10s to 90s (estimated)..."
      echo "--------------------"
      echo "Warning: This could provide a fake closest!"
      echo "--------------------"
      best_time=9999
      #predefine value to mesh, otherwise it will be stuck in an endless loop!
      mirrorf=mesh
      for mirror_tmp in ufpr internap mesh puzzle jaist optusnet kent garr nchc; do
        timednow=`ping -Aqc 5 -s 120 $mirror_tmp.dl.sourceforge.net | sed -nr 's/.*time\ ([0-9]+)ms.*/\1/p'`
        echo "$mirror_tmp: $timednow ms"
        if [ $timednow -lt $best_time ]; then
          mirrorf=$mirror_tmp
          best_time=$timednow
        fi
      done
      echo "*---Mirror picked: $mirrorf" ) > tempmirror.log &

    mirror=
    mirror_total_count=10   # it already includes the mirror picked line!
    mirror_initial_line_count=5
    percent=0
    (
    while [ "x$mirror" == "x" ] ; do
      mirror=`grep "picked:" tempmirror.log | cut -c20-`
      percent=`cat tempmirror.log | wc -l`
      percent=`expr \( $percent - $mirror_initial_line_count \) \* 100 / $mirror_total_count`
      echo $percent
      echo "XXX"
      echo -e "`cat tempmirror.log`"
      echo "XXX"
      sleep 1
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Mirror selector" --gauge "Starting..." 20 60 $percent
    
    # due to the sub-shell execution, have to get again the mirror's name
    mirror=`grep "picked:" tempmirror.log | cut -c20-`
    rm -f tempmirror.log
  fi
  clear

}


#Final interface before starting to install
function final_interface_before_install()
{
  #Show to user the detected settings, last chance to cancel the installer
  while : ; do
    (dialog --backtitle "$GUI_BACKTITLE" \
--title "Final settings - <ESC> to abort the Installer" \
--msgbox "-------------------------------------------------------------------------\n
| =========   Detected that you are running: Ubuntu $SYSTEM_VERSION - $arch\n
| \\      /    The choosed mirror is: $mirror\n
|  \\    /     Logging: $LOG_OUTPUTS\n
|   \\  /      Install mode: $INSTALLMODE\n
|    \\/       Run apt-get upgrade ? $DOUPGRADE\n
| *installOF* Build documentation ? $BUILD_DOCUMENTATION <nothing means no>\n
| *settings*  Use startFoam alias ? $USE_ALIAS_FOR_BASHRC\n
|             Use OpenFOAM gcc ? $USE_OF_GCC\n
-------------------------------------------------------------------------\n
!For more info see documentation on $MAIN_PAGE_URL" 15 80)
    
    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}
