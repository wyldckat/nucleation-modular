#!/bin/bash
#-----------------------------------------------------------------------
#   Nucleation - Nucleation (an unofficial OpenFOAM Installer) lower
#the work to have foam in your system.
#
#   visit: http://code.google.com/p/nucleation/
#
#-----------------------------------------------------------------------
#    This file is part of Nucleation.
#
#    Nucleation is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Nucleation is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nucleation.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------

#-- USER INTERFACE FUNCTIONS ------------------------------------------------------
#list of functions herein:
#   cancel_installer()
#   show_intro_dialog()
#   pick_openfoam_path()
#   should_keep_inst_log()
#   define_install_mode()
#   pick_openfoam_version()
#   define_base_custom_options()
#   define_custom_optionals()
#   define_paraview_options()
#   pick_download_mirror()
#   final_interface_before_install()

#global variables used by this script:
#   INST_SYSTEM - System variant for installation - defined in the master script
#   SCRIPT_WORKFOLDER - the work folder for the script (contains all of the dependencies of the script) - defined in the master script
#   arch - the architecture for the build - defined in the master script
#   GUI_BACKTITLE - The back title for the dialogs
#   MAIN_PAGE_URL - the main URL for the project page - defined in the master script
#   PATHOF        - the base path for the OpenFOAM installation - defined by pick_openfoam_path()
#   BASE_LOG_FOLDER - the base folder for logs - defined by should_keep_inst_log()
#   LOG_OUTPUTS   - option for logging the outputs of the master script - defined in should_keep_inst_log()
#   INSTALLMODE   - option for the installation mode - defined in define_install_mode()
#   OF_LONG_VERSION - long version of OpenFOAM to be installed - defined in pick_openfoam_version()
#   OF_SHORT_VERSION - short version of OpenFOAM to be installed - defined in pick_openfoam_version()
#   CUSTOMOPTS_OFOPTIONALS - option for showing/using custom options for OpenFOAM optionables - defined in define_base_custom_options()
#   CUSTOMOPTS_PARAVIEW - option for showing/using custom options for ParaView
#   BUILD_DOCUMENTATION - option for building OpenFOAM's code documentation - defined in define_custom_optionals()
#   USE_ALIAS_FOR_BASHRC - option for using alias for sourcing OpenFOAM's bashrc - defined in define_custom_optionals()
#   USE_OF_GCC          - option for building or not gcc - defined in define_custom_optionals()
#   BUILD_CCM26TOFOAM   - option for building ccm26ToFoam - defined in define_custom_optionals()
#   USE_REPO_PV         - option for using the system's ParaView - defined in define_custom_optionals()
#   USE_KITWARE_PV         - option for using the system's ParaView - defined in define_custom_optionals()
#   BUILD_QT            - option for building Qt - defined in define_paraview_options()
#   BUILD_PARAVIEW      - option for building ParaView - defined in define_paraview_options()
#   BUILD_PARAVIEW_WITH_GUI - option for building ParaView with GUI - defined in define_paraview_options()
#   BUILD_PARAVIEW_WITH_MPI - option for building ParaView with MPI - defined in define_paraview_options()
#   BUILD_PARAVIEW_WITH_PYTHON - option for building ParaView with Python - defined in define_paraview_options()
#   BUILD_PARAVIEW_WITH_OSMESA - option for building ParaView with OSMesa - defined in define_paraview_options()
#   USE_OF_GCC          - option for building or not gcc - defined in common/user_interface
#   mirror              - option for what mirror to use on sourceforge - defined in pick_download_mirror()

#Code -----------------------------------------
echo "Sourcing User Interface functions..."

GUI_BACKTITLE="Unofficial OpenFOAM Installer (${INST_SYSTEM} variant)"

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/common/${INST_SYSTEM}/user_interface
else
  echo "The variable INST_SYSTEM and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi


#-- GUI UTILITY FUNCTIONS ------------------------------------------------------
function cancel_installer()
{
    dialog --backtitle "$GUI_BACKTITLE" \
--title "Cancel the Installer" \
--yesno 'Are you sure that you want to cancel the installer ??' 5 60 ;
    if [ x"$?" == x"0" ]; then
        clear
        exit
    fi
}
#-- GUI END UTILITY FUNCTIONS --------------------------------------------------

#FUNCTIONS ------------------------------------------------------------------------------

function show_intro_dialog()
{
#Presentation dialog
dialog --title "$GUI_BACKTITLE" \
--msgbox "------------------------------------------------------------------------\n
| \n
| Unofficial OpenFOAM Installer (${INST_SYSTEM} variant)\n
| Licensed under GPLv3\n
| Web: ${MAIN_PAGE_URL}\n
| Contributions: ${MAIN_PAGE_URL}/${CONTRIBS_WIKIPAGE_PATH}\n
| \n
------------------------------------------------------------------------" 12 80
}

function pick_openfoam_path()
{
  #Choose path to install OF, default is already set
  while : ; do
    PATHOF=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE" \
    --inputbox 'Choose the install path: < default: ~/OpenFOAM >' 8 60 ~/OpenFOAM )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

function should_keep_inst_log()
{
  #Logging option Dialog
  while : ; do
    LOG_OUTPUTS=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"   \
    --menu 'Do you want to save a log of the script? < default: Yes >' 0 40 0 \
    'Yes'   '' \
    'No' '' )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

function define_install_mode()
{
  #Installation mode dialog
  while : ; do
    INSTALLMODE=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"    \
    --radiolist 'Choose the Install Mode: < default: fresh >' 11 50 4 \
    'fresh'    'Make new Install' on \
    'update'   'Update current install'  off \
    'server'   'ParaView with: -GUI +MPI'  off \
    'custom'   'Use this only after installation'  off )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

#Choose OpenFOAM version to be installed
function pick_openfoam_version()
{
  while : ; do

    OF_MODULE_NAME=`eval "dialog --stdout \
    --backtitle \"$GUI_BACKTITLE\"    \
    --radiolist 'Choose which OpenFOAM version to install:' 11 50 ${OF_VERSIONS_DIALOG_NUM} \
    ${OF_VERSIONS_DIALOG} "`

    if [ x"$?" == x"0" -a x"$OF_MODULE_NAME" != "x" ]; then
      break;
    else
      cancel_installer
    fi
  done
}

#Handle custom options
function define_base_custom_options()
{
  if [ "x$INSTALLMODE" == "xcustom" ]; then

    while : ; do
      CUSTOMOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Build only parts, excluding OpenFOAM: < Space to select ! >" 10 65 2 \
      1 "Build OpenFOAM optionals" $CUSTOMOPTS_OFOPTIONALS \
      2 "Build ParaView with(out) Qt" $CUSTOMOPTS_PARAVIEW )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from PVSETTINGSOPTS
    CUSTOMOPTS_OFOPTIONALS=off
    CUSTOMOPTS_PARAVIEW=off
    #remove any commas (happens in (Open)SuSE)
    CUSTOMOPTS=`echo $CUSTOMOPTS | sed 's="==g'`
    for setting in $CUSTOMOPTS ; do
      if [ $setting == 1 ] ; then CUSTOMOPTS_OFOPTIONALS=on ; fi
      if [ $setting == 2 ] ; then CUSTOMOPTS_PARAVIEW=on ; fi
    done

    if [ "x$CUSTOMOPTS_OFOPTIONALS" == "xoff" -a "x$CUSTOMOPTS_PARAVIEW" == "xoff" ]; then
      clear
      echo "Nothing to do... exiting."
      exit 0
    fi

  elif [ "x$INSTALLMODE" != "xupdate" ]; then

    CUSTOMOPTS_OFOPTIONALS=on
    CUSTOMOPTS_PARAVIEW=on

  fi
}


#Define options for OpenFOAM optionals
function define_custom_optionals()
{
  #Define options for OpenFOAM optionals, specific to the installation system
  define_system_custom_optionals

  if [ "x$CUSTOMOPTS_OFOPTIONALS" == "xon" ]; then
    #Settings choosing Dialog
    while : ; do
      SETTINGSOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Choose Install settings: < Space to select ! >" 15 50 7 \
      1 "Build OpenFOAM docs" $BUILD_DOCUMENTATION \
      2 "Use startFoam alias" $USE_ALIAS_FOR_BASHRC \
      3 "Use OpenFOAM gcc compiler" $USE_OF_GCC \
      4 "Build ccm26ToFoam" $BUILD_CCM26TOFOAM \
      5 "Use System's OpenMPI" $USE_SYSTEM_OPENMPI \
      6 "Install ParaView from repository" $USE_REPO_PV \
      7 "Download latest ParaView from Kitware" $USE_KITWARE_PV )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from SETTINGSOPTS
    BUILD_DOCUMENTATION=off
    USE_ALIAS_FOR_BASHRC=off
    USE_OF_GCC=off
    BUILD_CCM26TOFOAM=off
    USE_SYSTEM_OPENMPI=off
    USE_REPO_PV=off
    USE_KITWARE_PV=off
    #remove any commas (happens in (Open)SuSE)
    SETTINGSOPTS=`echo $SETTINGSOPTS | sed 's="==g'`
    for setting in $SETTINGSOPTS ; do
      if [ $setting == "1" ] ; then BUILD_DOCUMENTATION=on ; fi
      if [ $setting == "2" ] ; then USE_ALIAS_FOR_BASHRC=on ; fi
      if [ $setting == "3" ] ; then USE_OF_GCC=on ; fi
      if [ $setting == "4" ] ; then BUILD_CCM26TOFOAM=on ; fi
      if [ $setting == "5" ] ; then USE_SYSTEM_OPENMPI=on ; fi
      if [ $setting == "6" ] ; then USE_REPO_PV=on ; fi
      if [ $setting == "7" ] ; then USE_KITWARE_PV=on ; fi
    done
  fi
}


#Define options for OpenFOAM optionals
function define_paraview_options()
{
  #ParaView configurations for a fresh install
  #skip Paraview Build options if install from Repo or Kitware was selected
  if [ "x$CUSTOMOPTS_PARAVIEW" == "xon" ] && \
     ! [ "$INSTALLMODE" == "fresh" -a "$USE_REPO_PV" == "on" -o "$USE_KITWARE_PV" == "on" ]; then
    while : ; do
      PVSETTINGSOPTS=$(dialog --stdout --separate-output \
      --backtitle "$GUI_BACKTITLE"         \
      --checklist "Choose ParaView settings: < Space to select ! >" 16 59 7 \
      1 "Do custom build of Qt ?" $BUILD_QT \
      2 "Do custom build of CMake ?" $BUILD_CMAKE \
      3 "Do custom build of ParaView ?" $BUILD_PARAVIEW \
      4 "Build ParaView with GUI ?" $BUILD_PARAVIEW_WITH_GUI \
      5 "Build ParaView with Python support ?" $BUILD_PARAVIEW_WITH_PYTHON \
      6 "Build ParaView with MPI support ?" $BUILD_PARAVIEW_WITH_MPI \
      7 "Build ParaView with OSMesa (without GUI) ?" $BUILD_PARAVIEW_WITH_OSMESA )

      if [ x"$?" == x"0" ]; then
        break;
      else
        cancel_installer
      fi
    done

    #Take care of unpack settings from PVSETTINGSOPTS
    BUILD_QT=off
    BUILD_CMAKE=off
    BUILD_PARAVIEW=off
    BUILD_PARAVIEW_WITH_GUI=off
    BUILD_PARAVIEW_WITH_PYTHON=off
    BUILD_PARAVIEW_WITH_MPI=off
    BUILD_PARAVIEW_WITH_OSMESA=off
    #remove any commas (happens in (Open)SuSE)
    PVSETTINGSOPTS=`echo $PVSETTINGSOPTS | sed 's="==g'`
    for setting in $PVSETTINGSOPTS ; do
      if [ $setting == "1" ] ; then BUILD_QT=on ; fi
      if [ $setting == "2" ] ; then BUILD_CMAKE=on ; fi
      if [ $setting == "3" ] ; then BUILD_PARAVIEW=on ; fi
      if [ $setting == "4" ] ; then BUILD_PARAVIEW_WITH_GUI=on ; fi
      if [ $setting == "5" ] ; then BUILD_PARAVIEW_WITH_PYTHON=on ; fi
      if [ $setting == "6" ] ; then BUILD_PARAVIEW_WITH_MPI=on ; fi
      if [ $setting == "7" ] ; then BUILD_PARAVIEW_WITH_OSMESA=on ; fi
    done
  fi
}

#Mirror selection dialog
function pick_download_mirror()
{

  while : ; do
    mirror=$(dialog --stdout \
    --backtitle "$GUI_BACKTITLE"   \
    --menu 'Choose your location for mirror selection? < default: autodetect >' 0 40 0 \
    findClosest 'Autodetect closest' \
    optusnet 'Australia' \
    ufpr 'Brazil' \
    nchc 'China/Taiwan' \
    mesh 'Germany' \
    garr 'Italy' \
    jaist 'Japan' \
    puzzle 'Switzerland' \
    kent 'UK' \
    internap 'US' )

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done

  #Detect and take care of fastest mirror
  if [ "x$mirror" == "xfindClosest" ]; then
    clear

    (
      echo "Searching for the closest mirror..."
      echo "It can take from 10s to 90s (estimated)..."
      echo "--------------------"
      echo "Warning: This could provide a fake closest!"
      echo "--------------------"
      best_time=9999
      #predefine value to mesh, otherwise it will be stuck in an endless loop!
      mirrorf=mesh
      for mirror_tmp in ufpr internap mesh puzzle jaist optusnet kent garr nchc; do
        timednow=`ping -Aqc 5 -s 120 $mirror_tmp.dl.sourceforge.net | sed -nr 's/.*time\ ([0-9]+)ms.*/\1/p'`
        echo "$mirror_tmp: $timednow ms"
        if [ $timednow -lt $best_time ]; then
          mirrorf=$mirror_tmp
          best_time=$timednow
        fi
      done
      echo "*---Mirror picked: $mirrorf" ) > tempmirror.log &

    mirror=
    mirror_total_count=10   # it already includes the mirror picked line!
    mirror_initial_line_count=5
    percent=0
    (
    while [ "x$mirror" == "x" ] ; do
      mirror=`grep "picked:" tempmirror.log | cut -c20-`
      percent=`cat tempmirror.log | wc -l`
      percent=`expr \( $percent - $mirror_initial_line_count \) \* 100 / $mirror_total_count`
      echo $percent
      echo "XXX"
      echo -e "`cat tempmirror.log`"
      echo "XXX"
      sleep 1
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Mirror selector" --gauge "Starting..." 20 60 $percent

    # due to the sub-shell execution, have to get again the mirror's name
    mirror=`grep "picked:" tempmirror.log | cut -c20-`
    rm -f tempmirror.log
  fi
  clear

}


#Final interface before starting to install
function final_interface_before_install()
{
  #Show to user the detected settings, last chance to cancel the installer
  while : ; do
    (dialog --backtitle "$GUI_BACKTITLE" \
--title "Final settings (summary) - <ESC> to abort the Installer" \
--msgbox "-------------------------------------------------------------------------\n
| Detected that you are running: $INST_SYSTEM $SYSTEM_VERSION - $arch\n
| The choosed mirror is: $mirror\n
| Logging: $LOG_OUTPUTS\n
| Install mode: $INSTALLMODE\n
| Build documentation ? $BUILD_DOCUMENTATION\n
| Use startFoam alias ? $USE_ALIAS_FOR_BASHRC\n
| Use custom gcc ? $USE_OF_GCC\n
| Build ParaView ? $BUILD_PARAVIEW\n
-------------------------------------------------------------------------\n
!For more info see documentation on $MAIN_PAGE_URL" 15 80)

    if [ x"$?" == x"0" ]; then
      break;
    else
      cancel_installer
    fi
  done

  clear
}
