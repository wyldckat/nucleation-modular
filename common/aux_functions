#!/bin/bash

#-- UTILITY FUNCTIONS ------------------------------------------------------
#list of functions herein:
#   isleftlarger_or_equal()
#   is_sh_bash()
#   issystem_english()
#   set_system_to_neutral_lang()
#   prune_packages_to_install()
#   monitor_sleep()
#   killgroup()
#   save_running_pids()
#   create_OpenFOAM_folder()
#   get_md5sums_for_OFpackages()
#   do_wget()
#   do_md5sum()
#   do_wget_md5sum()

#global variables used by this script:
#   INST_SYSTEM - must be defined before sourcing this script. It holds the name for the system 
#                    script of the same name as this one.
#   SCRIPT_WORKFOLDER - the folder where the main script's dependency files are located
#   PACKAGES_TO_INSTALL - list of packages to be installed - used by prune_packages_to_install()
#   PATHOF   - path to OpenFOAM's base folder. Example: $HOME/OpenFOAM
#   SAVEPIDS - list of PIDS to not kill - defined by save_running_pids() and used by killgroup()


#Code -----------------------------------------
echo "Sourcing Auxiliary functions..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/common/${INST_SYSTEM}/aux_functions
else
  echo "The variable INST_SYSTEM and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi

#FUNCTIONS ------------------------------------------------------------------------------

#float comparison >=
function isleftlarger_or_equal()
{
  set +e
  value_a=$1
  value_b=$2
  if [ x`echo $value_a | awk '{ if ($1 >= '$value_b') {print "yes"}}'` == "xyes" ]; then
    return 0
  else
    return 1
  fi
  set -e
}

#is sh->bash ? if so, returns 1, else 0
function is_sh_bash()
{
  set +e
  if [ "x`find \`which sh\` -lname bash`" == "x" ]; then
    return 0
  else
    return 1
  fi
  set -e
}

#is the system is running in english or not
function issystem_english()
{
  set +e
  if [ x`echo $LANG | grep ^en` != "x" ]; then
    return 1
  else
    return 0
  fi
  set -e
}

#set LC_ALL to C
function set_system_to_neutral_lang()
{
  export LC_ALL=C
}

function prune_packages_to_install()
{
  PACKAGES_TO_INSTALL_TMP=""
  for package in $PACKAGES_TO_INSTALL
  do
    ispackage_installed $package
    if [ x"$?" == x"0" ]; then
      PACKAGES_TO_INSTALL_TMP="$PACKAGES_TO_INSTALL_TMP $package"
    fi
  done
  PACKAGES_TO_INSTALL=$PACKAGES_TO_INSTALL_TMP
  unset PACKAGES_TO_INSTALL_TMP
}

function cd_openfoam()
{
  cd "$PATHOF"
}

function monitor_sleep()
{
  count_secs=0
  while ps -p $1 > /dev/null; do
    sleep 1
    count_secs=`expr $count_secs + 1`
    if [ "x$count_secs" == "x$2" ]; then
      break;
    fi
  done
  unset count_secs
}

function killgroup()
{
  if ps -p $1 > /dev/null; then
    TOKILLGROUP=$(ps x -o "%r %p" | awk "{ if ( \$2 == $1 ) { print \$1 }}")
    if [ "x$TOKILLGROUP" != "x" ]; then

      #make sure there are no unwanted survivors
      while true; do
        x=0

        #now get the processes that are to be killed
        TOKILL=$(ps x -o "%r %p" | awk "{ if ( \$1 == $TOKILLGROUP ) { print \$2 }}")

        #remove PIDS not to be killed
        for pids in $SAVEPIDS; do
          TOKILL=$(echo $TOKILL | sed -e "s/$pids//" -e 's/\ */\ /')
        done

        #now kill the ones in the kill list
        for pids in $TOKILL; do
          if ps -p $pids > /dev/null; then
            kill -SIGTERM $pids
            x=$(expr $x + 1)
          fi
        done

        if [ "$x" == "0" ]; then break; fi
      done
    fi
    unset TOKILL pids TOKILLGROUP
  fi
}

function save_running_pids()
{
  SAVEPIDS="$$"
  TONOTKILLGROUP=$(ps x -o "%r %p" | awk "{ if ( \$2 == $SAVEPIDS ) { print \$1 }}")
  SAVEPIDS=$(ps x -o "%r %p" | awk "{ if ( \$1 == $TONOTKILLGROUP ) { print \$2 }}")
  unset TONOTKILLGROUP
}

#Create OpenFOAM folder at $PATHOF
function create_OpenFOAM_folder()
{
  if [ ! -d "$PATHOF" ]; then
    mkdir -p $PATHOF
  fi
}

#this function retrieves the md5sums from www.openfoam.com
#the retrieved checksums are stored in the file "OFpackages.md5"
#NOTE: outdated function, but kept just in case as a reference!
function get_md5sums_for_OFpackages()
{
  w3m -dump -T text/html http://www.openfoam.com/download/linux32.php | grep gtgz | \
    sed -e 's/.*\(OpenFOAM.*\.gtgz\)[\ ]*\([a-z0-9]*$\)/\2  \1/' -e 's/.*\(ThirdParty.*\.gtgz\)[\ ]*\([a-z0-9]*$\)/\2  \1/' | \
    grep -e '^[a-z0-9]\{32\}' > OFpackages32.md5
  w3m -dump -T text/html http://www.openfoam.com/download/linux64.php | grep gtgz | \
    sed -e 's/.*\(OpenFOAM.*\.gtgz\)[\ ]*\([a-z0-9]*$\)/\2  \1/' -e 's/.*\(ThirdParty.*\.gtgz\)[\ ]*\([a-z0-9]*$\)/\2  \1/' | \
    grep -e '^[a-z0-9]\{32\}' > OFpackages64.md5
  cat OFpackages32.md5 OFpackages64.md5 | sort | uniq > OFpackages.md5
  rm -f OFpackages32.md5 OFpackages64.md5
}

# the 1st argument is the base address
# the 2nd argument is the file name
# the 3rd argument is the rest of the URL address
# the 4th argument is additional arguments to be given to wget before the URL
function do_wget()
{
  #either get the whole file, or try completing it, in case the user 
  #used previously Ctrl+C
  wget_string="$1$2"
  if [ "x$3" != "x" -a "x$3" != "x " ]; then
    wget_string="$wget_string$3"
  fi

  if [ "x$4" != "x" -a "x$4" != "x " ]; then
    if [ ! -e "$2" ]; then
      wget "$4" "$wget_string" 2>&1
    else
      wget -c "$4" "$wget_string" 2>&1
    fi
  else
    if [ ! -e "$2" ]; then
      wget "$wget_string" 2>&1
    else
      wget -c "$wget_string" 2>&1
    fi
  fi
  unset wget_string
}

#do a md5 checksum
#first argument is the file to check_installation
#second argument is the file where the check list is
function do_md5sum()
{
  set +e
  echo "Checking md5 checksum of file $1 ..."
  if [ x`grep $2 -e "$1" | md5sum -c | grep "$1: OK" | wc -l` == "x1" ]; then
    echo "File is OK."
    return 1
  else
    echo "File is NOT OK."
    return 0
  fi
  set -e
}

#this function will do wget and md5sum, and provide the possibility of 
#retrying to retrieve the same file in case of failure!
#arguments: first 3 are for wget, the last one is the file with the md5sum list
function do_wget_md5sum()
{
  while [ true ]; do
    do_wget "$1" "$2" "$3"
    do_md5sum "$2" "$4"
    if [ x"$?" == x"1" ]; then
      break;
    else
      echo -e "\nGetting the file '"$2"'seems to have failed for some reason. Do you want to try to download again? (yes or no): "
      read casestat;
      case $casestat in
        yes | y | Y | Yes | YES)
          rm -f "$2"
          ;;
        no | n | N | No | NO)
          break;
          ;;
      esac
    fi
  done
  unset casestat
}

