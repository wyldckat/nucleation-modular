#!/bin/bash

#-- MAIN FUNCTIONS ------------------------------------------------------
#list of functions herein:
#   ask_for_sudo_policy()
#   install_dialog_package()
#   define_script_s_files_system()

#global variables used by this script:
#   SHOW_SUDO_COMMANDS_ONLY - option for showing or direct usage of install commands - defined in ask_for_sudo_policy()
#   SYSTEM_VERSION - must be defined before sourcing this script. It holds the version for the system
#                    script of the same name as this one.
#   arch - the architecture for the build - defined in the master script
#   PACKAGES_TO_INSTALL - list (not an array) of packages that need to be installed - defined in install_dialog_package()
#   BUILD_QT            - option for building Qt - defined in common/user_interface
#   BUILD_PARAVIEW      - option for building ParaView - defined in common/user_interface
#   BUILD_PARAVIEW_WITH_GUI - option for building ParaView with GUI - defined in common/user_interface
#   BUILD_PARAVIEW_WITH_MPI - option for building ParaView with MPI - defined in common/user_interface
#   BUILD_PARAVIEW_WITH_PYTHON - option for building ParaView with Python - defined in common/user_interface
#   BUILD_PARAVIEW_WITH_OSMESA - option for building ParaView with OSMesa - defined in common/user_interface
#   BUILD_DOCUMENTATION - option for building OpenFOAM's code documentation - defined in common/user_interface
#   BUILD_GCC           - option for doing a custom build of gcc - defined in common/user_interface
#   BUILD_GCC_STRICT_64BIT - option for doing a custom build of gcc but only the 64bit version (no multilib) - defined in common/user_interface
#   USE_REPO_PV         - option for using the system's ParaView - defined in common/user_interface
#   USE_KITWARE_PV         - option for using the system's ParaView - defined in common/user_interface


#Code -----------------------------------------
echo "Sourcing Main functions for Generic System ..."

#FUNCTIONS ------------------------------------------------------------------------------

#setup sudo policy for this script
#REASON: not always does the user have superuser powers, or maybe the user doesn't fully trust us.
#Either way, using sudo whithin the script could be a security hazard waiting to happen :(
#NOTE: This function must always exist!
function ask_for_sudo_policy()
{
  echo '-----------------------------------------------------------'
  echo 'Welcome to the OpenFOAM Installer for Generic Linux System '
  echo ' '
  echo "  Since this installation script doesn't have guidelines"
  echo "specific to your system, it will try to guide you in which"
  echo "packages are needed for you to install. So keep a separate"
  echo "terminal ready for installing packages, or an email ready"
  echo "for your system's administrator."
  echo -e 'Press return or enter to continue...'
  read casestat;
  unset casestat
  echo "------------------------------------------------------"
}

#install dialog or abort if not possible
#NOTE: This function must always exist!
function install_dialog_package()
{
  if ! ispackage_installed dialog; then
    #tell the user that dialog has to be installed, and request permission to install it
    echo 'This script needs the package/application "dialog" to be installed. Please install it in a separate terminal.'
    echo ' '
    echo 'When the installation of the package is complete, please press enter to continue this script.'
    echo 'If you don''t want to install it now, press Ctrl+C.'
    read aaa_tmp_var
    unset aaa_tmp_var
  fi

  #confirm it's installed
  if ! ispackage_installed dialog; then
    echo "The package dialog isn't installed. Aborting script."
    exit 1
  fi
}

#Generate a list of packages that need to be installed, and try to check if they exist or not.
#NOTE: This function must always exist!
function install_packages()
{
  #define which packages need to be installed
  #applications:
  PACKAGES_TO_INSTALL="addr2line ranlib ld flex flex++ bison git tar wget sed grep hostname gcc g++ awk locate"

  #libraries:
  PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL libiberty libreadline libz"

  #headers:
  PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL bfd.h libiberty.h FlexLexer.h zlib.h"

  if [ "x$BUILD_PARAVIEW" == "xon" ]; then
    #applications:
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL cmake"

    #libraries:
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL libpython2.6 libXt libXi libcurl libXt libXi libpng12 libglut libXrender libXrandr libXcursor libXext libfreetype libfontconfig libglib-2.0"

    #headers:
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL Python.h StringDefs.h XInput.h png.h glut.h Xrender.h Xrandr.h Xcursor.h freetype.h fontconfig.h glib.h"
  fi

  #for documentation, these are necessary
  if [ "x$BUILD_DOCUMENTATION" == "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL doxygen gvpack"
  fi

  #for building gcc, these are necessary
  if [ "x$BUILD_GCC" == "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL makeinfo byacc"
  fi

  if [ "x$USE_SYSTEM_OPENMPI" == "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL mpirun mpicc mpi.h"
  fi

  if [ "$arch" == "x64" ]; then
    if [ "x$BUILD_GCC_STRICT_64BIT" != "xon" -o "x$THIRDPARTY_BIN_CMAKE" != "x" ]; then
      #We haven't got any way to figure out if 32bit libraries are installed with the current search mechanism
      PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL multilib_ia32-libs_are_needed"
    fi
  fi

  #install qt4-dev and qt4-dev-tools only if the custom build isn't used
  if [ "x$BUILD_QT" != "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL qmake qdialog.h rcc uic moc qcollectiongenerator"
  fi

  #install OSMesa when chosen for ParaView
  if [ "x$BUILD_PARAVIEW_WITH_OSMESA" == "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL libOSMesa osmesa.h"
  fi

  #if paraview from repository option was selected, add it to the list of packages
  if [ "x$USE_REPO_PV" == "xon" ]; then
    PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL paraview"
  fi

  #now remove the ones that are already installed
  prune_packages_to_install

  #only show commands for installation if any packages are missing!
  if [ "x$PACKAGES_TO_INSTALL" != "x" ]; then

    echo 'Please install the following list of files (and respective packages) in another terminal or ask your system''s administrator to run them:'
    echo "   $PACKAGES_TO_INSTALL"
    echo ' '
    echo 'When the installation is complete, please press enter to continue this script.'
    echo 'If you don''t want to install it now, press Ctrl+C.'
    read aaa_tmp_var
    unset aaa_tmp_var

  fi

  #now remove the ones that are already installed again, to confirm that all have been installed!
  prune_packages_to_install
  if [ "x$PACKAGES_TO_INSTALL" != "x" ]; then
    echo -e "\n\nWARNING: The following packages aren't installed:"
    echo "  $PACKAGES_TO_INSTALL"
    echo -e "\nDo you want to try and continue the OpenFOAM installation? (yes or no): "
    read casestat;
    case $casestat in
      no | n | N | No | NO)
        echo "Installation aborted."
        set +e
        exit 1
        ;;
    esac
  fi
}

#Define files (including paths) to the files this script provides for common/$system
#NOTE: This function must always exist!
function define_script_s_files_system()
{
  #Nothing to do for now...
  :
}

#define default options that are system dependent
#NOTE: This function must always exist!
function define_default_user_options_system()
{
  #Nothing to do for now...
  :
}

