#!/bin/bash
#-----------------------------------------------------------------------
#   Nucleation - Nucleation (an unofficial OpenFOAM Installer) lower
#the work to have foam in your system.
#
#   visit: http://code.google.com/p/nucleation/
#
#-----------------------------------------------------------------------
#    This file is part of Nucleation.
#
#    Nucleation is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Nucleation is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nucleation.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------

#-- UTILITY FUNCTIONS For Ubuntu ------------------------------------------------------
#list of functions herein:
#   ispackage_installed()
#   unTar()

#global variables used by this script:
#   arch - the architecture for the build - defined in the master script


#Code -----------------------------------------
echo "Sourcing Generic System Related Auxiliary functions..."


#FUNCTIONS ------------------------------------------------------------------------------

#is package installed
#usage: ispackage_installed package_name
#NOTE: This function must always exist!
function ispackage_installed()
{
  set +e
  packageName=$1
  testPositive=""

  #since we aren't sure what we are looking for, we will try analyse package names according some heuristics:
  # - if it starts with "lib", then look for it in the libraries
  # - if it ends with ".h", then look for in source/include folders
  # - otherwise, we are probably looking for and executable. If so, use "which" to look for it!

  if [ "lib${packageName#lib}" == "${packageName}" ]; then
    # - if it starts with "lib", then look for it in the libraries
    #NOTE: a choice was made to not look in the folders set in LD_LIBRARY_PATH, because some systems
    #have a convention not to look in that variable.
    WHERETOLOOK="/lib /usr/lib /usr/local/lib"
    if [ "$arch" == "x64" ]; then
      WHERETOLOOK="$WHERETOLOOK /lib64 /usr/lib64 /usr/local/lib64"
    fi
    for libraryToLook in $WHERETOLOOK do
      if [ `find $libraryToLook -name "${packageName}\.*" | wc -l` -gt 0 ]; then
        testPositive="exists"
        break;
      fi
    done

  elif [ "x${packageName#*.}" == "xh" -o "x${packageName#*.}" == "xhpp" ]; then
    # - if it ends with ".h" (or hpp), then look for in source/include folders
    WHERETOLOOK="/usr/local/include /usr/include"
    for libraryToLook in $WHERETOLOOK do
      if [ `find $libraryToLook -name "${packageName}\.*" | wc -l` -gt 0 ]; then
        testPositive="exists"
        break;
      fi
    done

  else
    # - otherwise, we are probably looking for and executable. If so, use "which" to look for it!
    if which ${packageName} > /dev/null; then
      testPositive="exists"
    fi
  fi

  if [ "x$testPositive" != "x" ]; then #if found, report it!
    return 0
  else
    return 1
  fi
  unset packageName
  set -e
}

#usage: unTar format_z_j_lzma file_path files_to_extract
#NOTE: This function must always exist!
function unTar()
{
  TAR_OPT=$1
  TAR_FILE="$2"
  shift 2

  case $TAR_OPT in
  z | j)
    tar -x${TAR_OPT}f ${TAR_FILE} $*
    ;;
  *)
    tar --${TAR_OPT} -xf ${TAR_FILE} $*
    ;;
  esac
}
