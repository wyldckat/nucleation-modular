#! /bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is based on blueCAPE's unofficial mingw patches for OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     build-gcc44
#
# Description
#
#     Build script for gcc 4.4.x. It is based on build-mingw44 from blueCAPE's
#   patches for OpenFOAM 1.7.0 for cross-compiling in Linux for Windows:
#   http://openfoamwiki.net/index.php/Tip_Cross_Compiling_OpenFOAM_1.7_in_Linux_For_Windows_with_MinGW
#     This build script was originally based on the build script available at
#       http://www.symscape.com/files/articles/openfoam-windows/build-mingw
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
  echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
  echo "    The environment variables are inconsistent with the installation."
  echo "    Check the OpenFOAM entries in your dot-files and source them."
  exit 1
}
. tools/makeThirdPartyFunctions
. tools/makeExtraThirdPartyFunctions
#------------------------------------------------------------------------------

#-----------------------------------------------------
#
# BEGIN USER SETTINGS
#
# You need to review and adjust the macros that follow
#
#-----------------------------------------------------

#GNU GCC and company
GCCVERSION="gcc-4.4.4"
GMPVERSION="gmp-4.3.2"
MPFRVERSION="mpfr-2.4.2"
BINUTILSVERSION="binutils-2.20.1"
MAKEVERSION="make-3.82"

BUILDS_CLEANUP_AT_END=1 #0 - don't remove the build directories at the end; 1 - remove the build directories at the end
HOMES_CLEANUP_AT_END=1 #0 - don't remove the home directories of unpacked files at the end; 1 - remove the home directories of unpacked files at the end
BUILD_MAKE=1 #0 - don't build an up-to-date make; 1 - build an up-to-date make, which is useful for older systems
SEND_OUTPUT_TO_LOGS=1 #0 - don't send config/make outputs to logs; 1 - send config/make outputs to independent logs

#LOG FOLDER
LOG_FOLDER="$WM_PROJECT_INST_DIR/buildLogs"

#-----------------------------------------------------
#
# END USER SETTINGS
#
# The remainder of the script should not need any edits
#
#-----------------------------------------------------

if [ $# -gt 0 ]; then
  if [ "$1" = "--verbose" ]; then
    SEND_OUTPUT_TO_LOGS=0 #0 - don't send config/make outputs to logs
  else
    echo "Argument $1 is not recognized."
    exit 1
  fi
fi

# What flavor of GCC cross-compiler are we building?
case $WM_COMPILER in
Gcc | Gcc44)
  echo "This compiler $WM_COMPILER is currently supported by this script."
  ;;
*)
  echo "Error: this compiler $WM_COMPILER is not supported."
  exit 1
  ;;
esac

#WM_COMPILER_DIR <- this is the prefix for all builds made here!
#buildBASE <- this is where the things are going to be built
#$buildBASE/$---VERSION <- this is where each package is going to be built
#$WM_THIRD_PARTY_DIR/$---VERSION <- this is where each source folder will be

GCC_HOME="$WM_THIRD_PARTY_DIR/$GCCVERSION"
GMP_HOME="$WM_THIRD_PARTY_DIR/$GMPVERSION"
MPFR_HOME="$WM_THIRD_PARTY_DIR/$MPFRVERSION"
BINUTILS_HOME="$WM_THIRD_PARTY_DIR/$BINUTILSVERSION"
MAKE_HOME="$WM_THIRD_PARTY_DIR/$MAKEVERSION"
REPORTMISSINGFILES="${DownloadRepository}/downloadReportProblems.txt"

PREFIX="${WM_THIRD_PARTY_DIR}/platforms/$WM_ARCH$WM_COMPILER_ARCH/$GCCVERSION"
PURGE=""
PURGEBUILDBASE="Y"
TARGET_LOG_STRING="" #initialize only

if [ -d "$PREFIX" ]; then
  echo "It seems that there is already an existing custom $GCCVERSION compiler installed."
  echo "Do you wish to remove it and update it to the latest available version? (yes, ignore or no)"
  echo "NOTE: answering ignore will aid with continuing were it left off"
  read answer
  case $answer in
      yes | y | Y | Yes | YES)
        rm -rf "$PREFIX"
        PURGE="Y"
        ;;
      ignore | i | I | Ignore | IGNORE)
        PURGEBUILDBASE=""
        ;;
      *)
        echo "Installation aborted."
        exit 1
        ;;
  esac
fi

if [ -d "$buildBASE" -a "x$PURGEBUILDBASE" != "x" ]; then
  rm -rf "$buildBASE"
fi

#make sure the log folder exists and expand its path
if [ ! -d "$LOG_FOLDER" ]; then
  mkdir -p $LOG_FOLDER
fi
LOG_FOLDER=`( cd "$LOG_FOLDER" && pwd )`

GCC_BDIR="$buildBASE/$GCCVERSION"
BINUTILS_BDIR="$buildBASE/$BINUTILSVERSION"
MAKE_BDIR="$buildBASE/$MAKEVERSION"

#
# Set the number of cores to build on
#
getNCOMPPROCS -v

#set architecture bits
ABI=$WM_ARCH_OPTION


#define files to download and respective URLS
GCC_TARFILE="${GCCVERSION}.tar.bz2"
GMP_TARFILE="${GMPVERSION}.tar.bz2"
MPFR_TARFILE="${MPFRVERSION}.tar.bz2"
BINUTILS_TARFILE="${BINUTILSVERSION}.tar.bz2"
MAKE_TARFILE="${MAKEVERSION}.tar.bz2"

GNU_URL="ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/${GCCVERSION}/${GCC_TARFILE}"
GMP_URL="ftp://ftp.gnu.org/gnu/gmp/${GMP_TARFILE}"
MPFR_URL="ftp://ftp.gnu.org/gnu/mpfr/${MPFR_TARFILE}"
BINUTILS_URL="ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/binutils/releases/${BINUTILS_TARFILE}"
MAKE_URL="ftp://ftp.gnu.org/gnu/make/${MAKE_TARFILE}"

# Make sure these are initialized as we want them

GCC_LANGS="c,c++"



#-----------------------------------------------------
#
# Functions that do most of the work
#
#-----------------------------------------------------

checkAndReport()
{
  file=$1
  URL=$2

  if [ ! -e "${DownloadRepository}/${file}" ]; then
    if [ ! -e "${REPORTMISSINGFILES}" ]; then
      echo "Please download the missing files to:" > "${REPORTMISSINGFILES}"
      echo -e "  ${DownloadRepository}\n\n" >> "${REPORTMISSINGFILES}"
      echo "The missing files are (these are the internet addresses for downloading):" >> "${REPORTMISSINGFILES}"
    fi

    echo "${URL}/${file}" >> "${REPORTMISSINGFILES}"
  fi
}

download_files()
{
  # Make sure wget is installed
  if test "x`which wget`" = "x" ; then
    echo "You need to install wget."
    exit 1
  fi

  downloadFile $GCC_TARFILE $GNU_URL
  downloadFile $GMP_TARFILE $GMP_URL
  downloadFile $MPFR_TARFILE $MPFR_URL
  downloadFile $BINUTILS_TARFILE $BINUTILS_URL
  if [ "x$BUILD_MAKE" = "x1" ]; then
    downloadFile $MAKE_TARFILE $MAKE_URL
  fi

  if [ -e "${REPORTMISSINGFILES}" ]; then rm "${REPORTMISSINGFILES}"; fi
  checkAndReport $GCC_TARFILE $GNU_URL
  checkAndReport $GMP_TARFILE $GMP_URL
  checkAndReport $MPFR_TARFILE $MPFR_URL
  checkAndReport $BINUTILS_TARFILE $BINUTILS_URL
  if [ "x$BUILD_MAKE" = "x1" ]; then
    checkAndReport $MAKE_TARFILE $MAKE_URL
  fi
  if [ -e "${REPORTMISSINGFILES}" ]; then
    echo "It seems that some files were not downloaded with success. Please see the file:"
    echo "   ${REPORTMISSINGFILES}"
    echo "for more instructions."
    exit 1
  fi
}


purge_folder()
{
  if [ -d "$1" ]; then
    rm -rf "$1"
  fi
}


purge_homes()
{
  purge_folder "$GCC_HOME"
  purge_folder "$GMP_HOME"
  purge_folder "$MPFR_HOME"
  purge_folder "$BINUTILS_HOME"
}


unpack_files()
{
  echo "Unpacking files..."

  if [ "x$PURGE" != "x" ]; then
    purge_homes
  fi

  if [ ! -d $GCCVERSION ]; then unpackFile $GCC_TARFILE; fi
  if [ ! -d $GMPVERSION ]; then unpackFile $GMP_TARFILE; fi
  if [ ! -d $MPFRVERSION ]; then unpackFile $MPFR_TARFILE; fi
  if [ ! -d $BINUTILSVERSION ]; then unpackFile $BINUTILS_TARFILE; fi
  if [ "x$BUILD_MAKE" = "x1" ]; then
    if [ ! -d $MAKEVERSION ]; then unpackFile $MAKE_TARFILE; fi
  fi

  #fix links for GMP and MPFR
  do_links_GM
}


do_links_GM()
{
  #hook up gmp and mpfr to gcc's folder
  if [ ! -d "$GCC_HOME/gmp" ]; then
    ln -s $GMP_HOME $GCC_HOME/gmp
  fi
  if [ ! -d "$GCC_HOME/mpfr" ]; then
    ln -s $MPFR_HOME $GCC_HOME/mpfr
  fi
}


setup_targetlog()
{
  TARGET_LOG_STRING=""
  if [ "x$SEND_OUTPUT_TO_LOGS" = "x1" ]; then
    TARGET_LOG_STRING="> $1 2>&1"
  fi
}

configure_make()
{
  setup_targetlog ${LOG_FOLDER}/make-${WM_COMPILER}_configure.log

  if [ -d "$MAKE_BDIR" ]; then rm -rf "$MAKE_BDIR"; fi
  mkdir -p "$MAKE_BDIR"
  cd "$MAKE_BDIR"
  echo "Configuring make"
  eval "\"$MAKE_HOME/configure\" --prefix=${PREFIX} \
      --disable-multilib \
      --with-host-libstdcxx='-lstdc++' --with-gcc \
      --with-gnu-as --with-gnu-ld --enable-shared --disable-rpath \
      --disable-werror \
      ${TARGET_LOG_STRING}"

      ##--with-sysroot=${PREFIX}
  if test $? -ne 0; then
    echo "make of make failed - log available: ${LOG_FOLDER}/make-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_make()
{
  setup_targetlog ${LOG_FOLDER}/make-${WM_COMPILER}_make.log

  cd "$MAKE_BDIR"
  echo "Building make"
  # -fno-exceptions
  eval "make -j $WM_NCOMPPROCS CFLAGS=\"-O2\" LDFLAGS=\"-s\" ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "make of make failed - log available: ${LOG_FOLDER}/make-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_make()
{
  setup_targetlog ${LOG_FOLDER}/make-${WM_COMPILER}_make-install.log

  cd "$MAKE_BDIR"
  echo "Installing make"
  eval "make install ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "install of make failed - log available: ${LOG_FOLDER}/make-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


configure_binutils()
{
  setup_targetlog ${LOG_FOLDER}/binutils-${WM_COMPILER}_configure.log

  if [ -d "$BINUTILS_BDIR" ]; then rm -rf "$BINUTILS_BDIR"; fi
  mkdir -p "$BINUTILS_BDIR"
  cd "$BINUTILS_BDIR"
  echo "Configuring binutils"
  eval "\"$BINUTILS_HOME/configure\" --prefix=${PREFIX} \
      --disable-multilib \
      --with-host-libstdcxx='-lstdc++' --with-gcc \
      --with-gnu-as --with-gnu-ld --enable-shared --disable-rpath \
      --disable-werror \
      ${TARGET_LOG_STRING}"

      ##--with-sysroot=${PREFIX}
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_configure.log"
    exit 1
  else
    #Source of fix: http://wiki.osdev.org/Talk:GCC_Cross-Compiler#Texinfo
    echo "MAKEINFO = :" >> Makefile
  fi
}


build_binutils()
{
  setup_targetlog ${LOG_FOLDER}/binutils-${WM_COMPILER}_make.log

  cd "$BINUTILS_BDIR"
  echo "Building binutils"
  # -fno-exceptions
  eval "make -j $WM_NCOMPPROCS CFLAGS="-O2" LDFLAGS="-s" ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_binutils()
{
  setup_targetlog ${LOG_FOLDER}/binutils-${WM_COMPILER}_make-install.log

  cd "$BINUTILS_BDIR"
  echo "Installing binutils"
  eval "make install ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "install of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


configure_gcc()
{
  setup_targetlog ${LOG_FOLDER}/gcc-${WM_COMPILER}_configure.log

  if [ -d "$GCC_BDIR" ]; then rm -rf "$GCC_BDIR"; fi
  mkdir -p "$GCC_BDIR"
  cd "$GCC_BDIR"
  echo "Configuring gcc"

  eval "${GCC_HOME}/configure -v \
    --prefix=${PREFIX} --disable-multilib \
    --with-pkgversion='OpenFOAM' --enable-languages=${GCC_LANGS} \
    --enable-__cxa_atexit --enable-libstdcxx-allocator=new \
    ${TARGET_LOG_STRING}"

  if test $? -ne 0; then
    echo "configure of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_gcc()
{
  setup_targetlog ${LOG_FOLDER}/gcc-${WM_COMPILER}_make.log

  cd "$GCC_BDIR"
  echo "Building gcc"
  eval "make -j $WM_NCOMPPROCS ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "make of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_gcc()
{
  setup_targetlog ${LOG_FOLDER}/gcc-${WM_COMPILER}_make-install.log

  cd "$GCC_BDIR"
  echo "Installing gcc"
  eval "make install ${TARGET_LOG_STRING}"
  if test $? -ne 0; then
    echo "install of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


final_clean_up()
{
  if [ $BUILDS_CLEANUP_AT_END -eq 1 ]; then
    if [ -d "$GCC_BDIR" ]; then rm -rf "$GCC_BDIR"; fi
    if [ -d "$BINUTILS_BDIR" ]; then rm -rf "$BINUTILS_BDIR"; fi
  fi

  if [ $HOMES_CLEANUP_AT_END -eq 1 ]; then
    purge_homes
  fi
}


#
# Main part of the script
#

download_files

unpack_files

if [ "x$BUILD_MAKE" = "x1" ]; then
  configure_make
  build_make
  install_make
fi

configure_binutils
build_binutils
install_binutils

configure_gcc
build_gcc
install_gcc

final_clean_up

#
# End
#
