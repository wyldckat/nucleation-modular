#!/bin/bash

#-- MAIN FUNCTIONS ------------------------------------------------------
#list of functions herein:

#global variables used by this script:


#Code -----------------------------------------
echo "Sourcing Main functions..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/common/${INST_SYSTEM}/main_functions
else
  echo "The variable INST_SYSTEM and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi


#FUNCTIONS ------------------------------------------------------------------------------

#Define files (including paths) to the files this script provides
function define_script_s_files()
{
  #Define files (including paths) to the files this script provides for common/$system
  define_script_s_files_system

  #Define files (including paths) to the files this script provides for of$OF_SHORT_VERSION
  define_script_s_files_ofv

  #Repository paraview -> upgraded paraFoam script
  if [ "x$USE_REPO_PV" == "xon" -o "x$USE_KITWARE_PV" == "xon" ]; then
    PFOAM_PATCHFILE[0]="paraFoamSys"
    PFOAM_PATCHFILE[1]="${SCRIPT_WORKFOLDER}/common/files/${PFOAM_PATCHFILE[0]}"
  fi

  #patch file for tweaking timing option into wmake
  WMAKEPATCHFILE[0]="patchWmake"
  WMAKEPATCHFILE[1]="${SCRIPT_WORKFOLDER}/common/files/${WMAKEPATCHFILE[0]}"
}


function define_default_user_options()
{
  LOG_OUTPUTS=Yes             #Yes | No
  INSTALLMODE=fresh           #fresh | update | server | custom
  CUSTOMOPTS_OFOPTIONALS=off  #on | off
  CUSTOMOPTS_PARAVIEW=off     #on | off

  BUILD_DOCUMENTATION=off     #on | off
  USE_ALIAS_FOR_BASHRC=on     #on | off
  USE_OF_GCC=off              #on | off
  BUILD_CCM26TOFOAM=off       #on | off
  USE_SYSTEM_OPENMPI=off      #on | off
  USE_REPO_PV=off             #on | off
  USE_KITWARE_PV=off          #on | off

  BUILD_QT=off                   #on | off
  BUILD_CMAKE=off                #on | off
  BUILD_PARAVIEW=off             #on | off
  BUILD_PARAVIEW_WITH_GUI=on     #on | off
  BUILD_PARAVIEW_WITH_PYTHON=off #on | off
  BUILD_PARAVIEW_WITH_MPI=off    #on | off
  BUILD_PARAVIEW_WITH_OSMESA=off #on | off

  BUILD_GCC=off               #on | off
  BUILD_GCC_STRICT_64BIT=off  #on | off

  #findClosest | optusnet | ufpr | nchc | mesh | garr | jaist | puzzle | kent | internap
  mirror=mesh

  #define default options that are system dependent
  define_default_user_options_system
}

#git clone OpenFOAM
function OpenFOAM_git_clone()
{
  cd_openfoam #this is a precautionary measure

  echo "------------------------------------------------------"
  echo "Retrieving OpenFOAM $OF_LONG_VERSION from git..."
  echo "------------------------------------------------------"
  git clone ${OPENFOAM_GIT_REPO}
  OpenFOAM_git_error=$?

  continue_after_failed_openfoam_git
}

#apply patches and fixes
function apply_patches_fixes()
{
  #apply patches (depends on the version of OpenFOAM)
  apply_patches

  #apply_fixes (also depends on the version of OpenFOAM)
  apply_fixes
}

#Activate OpenFOAM environment
function setOpenFOAMEnv()
{
  echo "------------------------------------------------------"
  echo "Activate OpenFOAM environment"
  echo "------------------------------------------------------"
  cd_openfoam
  cd OpenFOAM-$OF_LONG_VERSION/
  . $PATHOF/OpenFOAM-$OF_LONG_VERSION/etc/bashrc
}

#Add OpenFOAM's bashrc entry in $PATHOF/.bashrc
function add_openfoam_to_bashrc()
{
  echo "------------------------------------------------------"
  echo "Add OpenFOAM's bashrc entry in $PATHOF/.bashrc"
  echo "------------------------------------------------------"

  #nuke ~/.bashrc entries that have references to the same script
  grep -v "$PATHOF/OpenFOAM-$OF_LONG_VERSION/etc/bashrc" ~/.bashrc > ~/.bashrc.new
  cp ~/.bashrc ~/.bashrc.old
  mv ~/.bashrc.new ~/.bashrc
  if [ "x$USE_ALIAS_FOR_BASHRC" == "xon" ]; then
    echo -e "alias startFoam$OF_SHORT_VERSION=\". $PATHOF/OpenFOAM-$OF_LONG_VERSION/etc/bashrc\"" >> ~/.bashrc
  else
    echo ". $PATHOF/OpenFOAM-$OF_LONG_VERSION/etc/bashrc" >> ~/.bashrc
  fi
}

#provide the user with a progress bar and timings for building gcc
function build_gcc_progress_dialog()
{
  if [ "x$BUILD_GCC_MUST_KILL" == "xYes" ]; then

    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_GCC_PID

  else

    ( #while true is used as a containment cycle...
    while : ;
    do
      if [ -e "$BUILD_GCC_LOG" ]; then
        BUILD_GCC_MAKECOUNT=`grep 'make\[.\]' "$BUILD_GCC_LOG" | wc -l`
        nowpercent=`expr $BUILD_GCC_MAKECOUNT \* 100 / $BUILD_GCC_LAST_BUILD_COUNT`
      fi
      if [ "x$nowpercent" != "x$percent" ]; then
        percent=$nowpercent
        BUILD_GCC_UPDATE_TIME=`date`
      fi
      echo $percent
      echo "XXX"
      echo "Build gcc-$GCC_VERSION:"
      echo "The build process is going to be logged in the file:"
      echo "  $BUILD_GCC_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $BUILD_GCC_LOG"
      echo "Either way, please wait, this will take a while..."
      echo -e "\nQt started to build at:\n\t$BUILD_GCC_START_TIME\n"
      echo -e "Last progress update made at:\n\t$BUILD_GCC_UPDATE_TIME"
      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_GCC_PID 30

      if ! ps -p $BUILD_GCC_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building gcc" --gauge "Starting..." 20 80 $percent >&4
  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_GCC_PID 30
}

#this indicates to the user that we have it under control...
function build_gcc_ctrl_c_triggered()
{
  BUILD_GCC_MUST_KILL="Yes"
  build_gcc_progress_dialog
}

#build gcc that comes with OpenFOAM
function build_openfoam_gcc()
{
  if [ "x$BUILD_GCC" == "xon" ]; then

    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    cd $WM_THIRD_PARTY_DIR

    #gcc root changes with OpenFOAM versions...
    set_BUILD_GCC_ROOT

    #purge existing gcc
    if [ -e "$BUILD_GCC_ROOT" ]; then
      rm -rf $BUILD_GCC_ROOT
    fi

    #set options for building gcc (script dependent)
    set_BUILD_GCC_OPTION

    BUILD_GCC_LOG="${BASE_OFVER_LOG_FOLDER}/build_gcc.log"

    #set up traps...
    trap build_gcc_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build gcc:"

    #launch makeGcc asynchronously
    bash -c "time ./${GCCMODED_MAKESCRIPT[0]} $BUILD_GCC_OPTION" > "$BUILD_GCC_LOG" 2>&1 &
    BUILD_GCC_PID=$!
    BUILD_GCC_START_TIME=`date`
    BUILD_GCC_UPDATE_TIME=$BUILD_GCC_START_TIME

    #track build progress
    percent=0
    build_gcc_progress_dialog

    #wait for kill code to change
    clear
    if ! ps -p $BUILD_GCC_PID > /dev/null && [ "x$BUILD_GCC_MUST_KILL" != "x" ]; then
      echo "Kill code issued with success. The script will continue execution."
    fi

    #clear traps
    trap - SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build gcc-$GCC_VERSION:"
    if [ -e "$BUILD_GCC_ROOT/bin/gcc" ]; then
      echo -e "gcc started to build at:\n\t$BUILD_GCC_START_TIME\n"
      echo -e "Building gcc finished successfully at:\n\t`date`"
      echo "gcc is ready to be used."

      #sometimes it's necessary to do some additional fixing to the custom built gcc
      fix_gcc_if_necessary
    else
      echo "Build process didn't finished with success. A report with be created at the end of this installation script."
      FOAMINSTALLFAILED="Yes"
      BUILD_GCC_FAILED="Yes"
    fi
    echo "------------------------------------------------------"

  fi
}

#provide the user with a progress bar and timings for building OpenFOAM
function build_awopenfoam_progress_dialog()
{
  if [ "x$BUILD_AWOPENFOAM_MUST_KILL" == "xYes" ]; then
    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_AWOPENFOAM_PID

  else

    ( #while true is used as a containment cycle...
    while : ;
    do
      if [ -e "$BUILD_AWOPENFOAM_LOG" ]; then
        BUILD_AWOPENFOAM_MAKECOUNT=`grep 'WMAKE timing start' "$BUILD_AWOPENFOAM_LOG" | wc -l`
        nowpercent=`expr $BUILD_AWOPENFOAM_MAKECOUNT \* 100 / $BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT`
      fi

      if [ "x$nowpercent" != "x$percent" ]; then
        percent=$nowpercent
        BUILD_AWOPENFOAM_UPDATE_TIME=`date`
      fi
      echo $percent
      echo "XXX"
      echo "Build OpenFOAM:"
      echo "The Allwmake build process is going to be logged in the file:"
      echo "  $BUILD_AWOPENFOAM_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $BUILD_AWOPENFOAM_LOG"
      echo "WARNING: THIS CAN TAKE HOURS..."
      echo -e "\nAllwmake started to build at:\n\t$BUILD_AWOPENFOAM_START_TIME"
      echo -e "\nLast progress update made at:\n\t$BUILD_AWOPENFOAM_UPDATE_TIME"
      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_AWOPENFOAM_PID 30

      if ! ps -p $BUILD_AWOPENFOAM_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building OpenFOAM" --gauge "Starting..." 20 80 $percent >&4
  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_AWOPENFOAM_PID 30
}

#this indicates to the user that we have it under control...
function build_awopenfoam_ctrl_c_triggered()
{
  BUILD_AWOPENFOAM_MUST_KILL="Yes"
  build_awopenfoam_progress_dialog
}

#do an Allwmake on OpenFOAM
function allwmake_openfoam()
{
  #set up environment, just in case we forget about it!
  if [ "x$WM_PROJECT_DIR" == "x" ]; then
    setOpenFOAMEnv
  fi

  cd $WM_PROJECT_DIR
  BUILD_AWOPENFOAM_LOG="${BASE_OFVER_LOG_FOLDER}/make.log"

  #set up traps...
  trap build_awopenfoam_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

  export WM_DO_TIMINGS="Yes"

  echo "------------------------------------------------------"
  echo "Build OpenFOAM:"
  echo "Calculating building estimates, please wait..."
  #wmake is called once for each Make folder and for each Allwmake
  BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT1=`find ${WM_PROJECT_DIR}/* | grep -v "/applications/test" | grep -v "/Optional" | grep -v "/doc/" | grep -e "Make/files" -e "Allwmake" | wc -l`
  BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT2=`find ${WM_THIRD_PARTY_DIR}/* | grep -e "Make/options" -e "Allwmake" | wc -l`
  #wmake count should also include the first call... and at least 1 more just in case...
  BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT=`expr $BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT1 + $BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT2 + 2`
  unset BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT1 BUILD_AWOPENFOAM_ESTIM_BUILD_COUNT2
  echo "------------------------------------------------------"

  #launch wmake all asynchronously
  #bash -c is the only way I got for getting time results straight to display and also logged
  bash -c "time wmake all > ${BUILD_AWOPENFOAM_LOG} 2>&1" >> ${BUILD_AWOPENFOAM_LOG} 2>&1 &
  BUILD_AWOPENFOAM_PID=$!
  BUILD_AWOPENFOAM_START_TIME=`date`
  BUILD_AWOPENFOAM_UPDATE_TIME=$BUILD_AWOPENFOAM_START_TIME

  #track build progress
  percent=0
  build_awopenfoam_progress_dialog

  #wait for kill code to change
  clear
  if ! ps -p $BUILD_AWOPENFOAM_PID > /dev/null && [ "x$BUILD_AWOPENFOAM_MUST_KILL" != "x" ]; then
    echo "Kill code issued with success. The script will continue execution."
  fi

  #clear traps
  trap - SIGINT SIGQUIT SIGTERM

  export WM_DO_TIMINGS=
  echo "------------------------------------------------------"
  echo "Build OpenFOAM:"
  echo -e "Allwmake started to build at:\n\t$BUILD_AWOPENFOAM_START_TIME\n"
  echo -e "Allwmake finished at:\n\t`date`"
  echo "------------------------------------------------------"
}

#provide the user with a progress bar and timings for building OpenFOAM
function build_awopenfoam_docs_progress_dialog()
{
  if [ "x$BUILD_AWOPENFOAM_MUST_KILL" == "xYes" ]; then
    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_AWOPENFOAM_PID

  else

    ( #while true is used as a containment cycle...
    while : ;
    do
      if [ -e "$BUILD_AWOPENFOAMDOC_LOG" ]; then
        BUILD_AWOPENFOAM_NOWCOUNT=`cat "$BUILD_AWOPENFOAMDOC_LOG" | grep -e "^Parsing file" -e "^Generating code for file" -e "^Generating docs for" -e "^Generating dependency graph for directory" | wc -l`
        nowpercent=`expr $BUILD_AWOPENFOAM_NOWCOUNT \* 100 / $BUILD_AWOPENFOAMDOC_ESTIMCOUNT`
      fi

      if [ "x$nowpercent" != "x$percent" ]; then
        percent=$nowpercent
        BUILD_AWOPENFOAM_UPDATE_TIME=`date`
      fi

      echo $percent
      echo "XXX"
      echo "Build OpenFOAM documentation:"
      echo "The Doxygen build process is going to be logged in the file:"
      echo "  $BUILD_AWOPENFOAMDOC_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $BUILD_AWOPENFOAMDOC_LOG"
      echo "WARNING: THIS CAN TAKE HOURS..."
      echo -e "Doxygen started to build OpenFOAM code documentation at:\n\t$BUILD_AWOPENFOAMDOC_START_TIME"
      echo -e "\nLast progress update made at:\n\t$BUILD_AWOPENFOAM_UPDATE_TIME"
      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_AWOPENFOAM_PID 30

      if ! ps -p $BUILD_AWOPENFOAM_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building OpenFOAM" --gauge "Starting..." 24 80 $percent >&4
  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_AWOPENFOAM_PID 30
}

#this indicates to the user that we have it under control...
function build_awopenfoam_docs_ctrl_c_triggered()
{
  BUILD_AWOPENFOAM_MUST_KILL="Yes"
  build_awopenfoam_docs_progress_dialog
}

#do an "wmake all docs" on OpenFOAM
function allwmake_openfoam_docs()
{
  if [ "x$BUILD_DOCUMENTATION" == "xon" ]; then

    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    cd $WM_PROJECT_DIR
    BUILD_AWOPENFOAMDOC_LOG="${BASE_OFVER_LOG_FOLDER}/docmake.log"

    #set up traps...
    trap build_awopenfoam_docs_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build OpenFOAM code documentation:"
    echo "Calculating building estimates, please wait..."
    #first calculate estimate
    BUILD_AWOPENFOAMDOC_FILECOUNT=`find * | grep -v "/lnInclude/" | grep -v "/t/" | grep -e "^src/" -e "^applications/utilities" -e "^applications/solvers" | grep -e ".H$" -e ".C$" | wc -l`
    BUILD_AWOPENFOAMDOC_ESTIMCOUNT=`expr $BUILD_AWOPENFOAMDOC_FILECOUNT \* 385 / 100` #it's an empirical estimate based on some runs
    echo "Now it's going to build the documentation..."

    #launch wmake all asynchronously
    cd doc
    bash -c "time wmake all > ${BUILD_AWOPENFOAMDOC_LOG} 2>&1" >> ${BUILD_AWOPENFOAMDOC_LOG} 2>&1 &
    BUILD_AWOPENFOAM_PID=$!
    BUILD_AWOPENFOAMDOC_START_TIME=`date`
    BUILD_AWOPENFOAM_UPDATE_TIME=$BUILD_AWOPENFOAMDOC_START_TIME
    cd ..
    echo "------------------------------------------------------"

    #track build progress
    percent=0
    build_awopenfoam_docs_progress_dialog

    #wait for kill code to change
    clear
    if ! ps -p $BUILD_AWOPENFOAM_PID > /dev/null && [ "x$BUILD_AWOPENFOAM_MUST_KILL" != "x" ]; then
      echo "Kill code issued with success. The script will continue execution."
    fi

    #clear traps
    trap - SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build OpenFOAM:"
    echo -e "Doxygen started to build at:\n\t$BUILD_AWOPENFOAMDOC_START_TIME\n"
    echo -e "Doxygen finished at:\n\t`date`"
    echo "------------------------------------------------------"

  fi
}

function continue_after_failed_openfoam()
{
  if [ "x$FOAMINSTALLFAILED" != "x" ]; then
    FOAMINSTALLFAILED_BUTCONT="No"
    echo -e "\n------------------------------------------------------\n"
    echo "Although the previous step seems to have failed, do you wish to continue with the remaining steps?"

    if [ "x$BUILD_DOCUMENTATION" == "xon" -o "x$BUILD_CCM26TOFOAM" == "xon" -o \
         "x$BUILD_PARAVIEW" == "xon" -o "x$BUILD_QT" == "xon" ]; then
      echo "Missing steps are:"
      if [ "x$BUILD_DOCUMENTATION" == "xon" ]; then echo "- Building OpenFOAM's code documentation"; fi
      if [ "x$BUILD_QT" == "xon" ]; then echo "- Building Qt"; fi
      if [ "x$BUILD_PARAVIEW" == "xon" ]; then echo "- Building ParaView"; fi
      if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then echo "- Building ccm26ToFoam"; fi
    fi

    echo "Continue? (yes or no): "
    read casestat;
    case $casestat in
      yes | y | Y | Yes | YES) FOAMINSTALLFAILED_BUTCONT="Yes";;
    esac
    unset casestat
    echo "------------------------------------------------------"
  fi
}

function continue_after_failed_openfoam_git()
{
  if [ "x$OpenFOAM_git_error" != "x0" ]; then
    FOAMINSTALLFAILED="Yes"
    echo -e "\n------------------------------------------------------\n"
    echo "The previous git operation failed, which without it continuing this script may be useless."
    echo "But do you wish continue nonetheless? (yes or no): "
    read casestat;
    case $casestat in
      no | n | N | No | NO) exit 0;;
    esac
    unset casestat
    echo "------------------------------------------------------"
    FOAMINSTALLFAILED_BUTCONT="Yes"
  fi
}

#check if the installation is complete
function check_installation()
{
  #set up environment, just in case we forget about it!
  if [ "x$WM_PROJECT_DIR" == "x" ]; then
    setOpenFOAMEnv
  fi

  cd $WM_PROJECT_DIR

  FOAM_INSTALLATION_TEST_LOG="${BASE_OFVER_LOG_FOLDER}/foamIT.log"

  echo "------------------------------------------------------"
  echo "Checking installation - you should see NO criticals..."
  echo "------------------------------------------------------"
  foamInstallationTest | tee "$FOAM_INSTALLATION_TEST_LOG"
  echo -e "\n\nThis report has been saved in file $FOAM_INSTALLATION_TEST_LOG"

  #if issues found then generate "bug report" and request that the user reports it!
  IFERRORSDETECTED=`grep "Critical systems ok" "$FOAM_INSTALLATION_TEST_LOG"`
  if [ "x$IFERRORSDETECTED" == "x" ]; then
    FOAMINSTALLFAILED="Yes"
    echo -e "\nSadly there have been some critical issues detected by OpenFOAM's foamInstallationTest script."
    echo "A full report package will be generated at the end of this installation script."

    continue_after_failed_openfoam
  fi
  unset IFERRORSDETECTED
}

#final messages and instructions for when we do a clean install...
#whether it goes well or not
function final_messages_for_clean_install()
{
  echo "------------------------------------------------------"
  if [ "x$FOAMINSTALLFAILED" == "x" ]; then

    #If using bash alias, inform to use it to run!
    if [ "x$USE_ALIAS_FOR_BASHRC" == "xon" ]; then
      echo "Installation complete - You have chosen to use bash 'alias'"
      echo "To start using OpenFOAM, you'll have to start a new terminal first;"
      echo -e "then, type:\n\tstartFoam$OF_SHORT_VERSION\nto activate the OpenFOAM environment."
      echo "------------------------------------------------------"
    else
      echo "Installation complete"
      echo "To start using OpenFOAM, you'll have to start a new terminal first."
      echo "------------------------------------------------------"
    fi

  else

    DATETIMESTAMP=$(date +%Y-%m-%d_%H-%M)
    FINAL_REPORT_FILE="${BASE_LOG_FOLDER}/report_${DATETIMESTAMP}.tar.gz"
    FILES_TO_REPORT=""

    echo "Installation failed. Full report file is going to be generated. Parts of the installation that failed:"
    if [ "x$LOG_OUTPUTS" == "xYes" ]; then
      FILES_TO_REPORT="$FILES_TO_REPORT $LOG_OUTPUTS_FILE_LOCATION"
    fi
    if [ "x$OpenFOAM_git_error" != "x0" ]; then
      if [ "x$LOG_OUTPUTS" == "xYes" ]; then
        echo " - Retrieving git data failed;"
      else
        echo " - Retrieving git data failed, but no log has been kept, so we can only assume that the server is down;"
      fi
    fi
    if [ "x$BUILD_GCC_FAILED" == "xYes" ]; then
      echo " - Building gcc-$GCC_VERSION failed;"
      FILES_TO_REPORT="$FILES_TO_REPORT $BUILD_GCC_LOG"
    fi
    if [ "x$FOAMINSTALLFAILED_BUTCONT" != "x" ]; then
      echo " - Building OpenFOAM failed;"
      FILES_TO_REPORT="$FILES_TO_REPORT $FOAM_INSTALLATION_TEST_LOG $BUILD_AWOPENFOAM_LOG"
    fi
    if [ "x$FOAMINSTALLFAILED_BUTCONT" == "xYes" -o "x$FOAMINSTALLFAILED_BUTCONT" == "x" ]; then
      if [ "x$BUILD_DOCUMENTATION" == "xon" ]; then
        echo " - It's unknown if building OpenFOAM's code documentation failed or not;"
        FILES_TO_REPORT="$FILES_TO_REPORT $BUILD_AWOPENFOAMDOC_LOG"
      fi

      if [ "x$BUILDING_QT_FAILED" == "xYes" ]; then
        echo " - Building Qt failed;"
        FILES_TO_REPORT="$FILES_TO_REPORT $BUILD_QT_LOG"
      fi

      if [ "x$BUILDING_CMAKE_FAILED" == "xYes" ]; then
        echo " - Building CMake failed;"
        FILES_TO_REPORT="$FILES_TO_REPORT $BUILD_CMAKE_LOG"
      fi

      if [ "x$BUILDING_PARAVIEW_FAILED" == "xYes" ]; then
        echo " - Building ParaView failed;"
        FILES_TO_REPORT="$FILES_TO_REPORT $PARAVIEW_BUILD_LOG"
      fi

      if [ "x$PV3FOAMREADERFAILED" == "xYes" ]; then
        echo " - Building PV3FoamReader failed;"
        FILES_TO_REPORT="$FILES_TO_REPORT $PV3FOAMREADER_BUILD_LOG"
      fi

      if [ "x$CCM26INSTALLFAILED" == "xYes" ]; then
        echo " - Building ccm26ToFoam failed;"
        FILES_TO_REPORT="$FILES_TO_REPORT $BUILD_CCM26TOFOAM_LOG"
      fi
    fi

    echo "Compressing file ${FINAL_REPORT_FILE}"
    if [ -e "${FINAL_REPORT_FILE}" ]; then rm -f "${FINAL_REPORT_FILE}"; fi
    set -x #need to do some debug on the tar subject...
    tar -czf "${FINAL_REPORT_FILE}" $FILES_TO_REPORT 2>&4 1>&4 #redirections needed to avoid log being changed
    set +x
    echo "Compression complete. Please attach this file to your report at this forum thread:"
    echo "  ${FORUM_THREAD}"
    echo -e '\nYou can also verify that thread for other people who might have had the same problems.'
    echo -e '\nIf the file is too big, please report at this project'"'"'s '"'"'issues'"'"' page:'
    echo "  ${SCRIPT_ISSUES_URL}"

    if [ "x$USE_ALIAS_FOR_BASHRC" == "xon" ]; then
      echo -e "Nonetheless, next time you launch a new terminal/console, you can set up the OpenFOAM environment by typing:\n\tstartFoam$OF_SHORT_VERSION"
    else
      echo "Nonetheless, next time you launch a new terminal/console, the OpenFOAM environment will be ready to be used."
    fi
    echo "------------------------------------------------------"

  fi
}

function OpenFOAM_git_pull()
{
  #set up environment, just in case we forget about it!
  if [ "x$WM_PROJECT_DIR" == "x" ]; then
    setOpenFOAMEnv
  fi

  cd $WM_PROJECT_DIR

  echo "------------------------------------------------------"
  echo "Let's do a git pull"
  echo "------------------------------------------------------"
  git pull
  OpenFOAM_git_error=$?

  continue_after_failed_openfoam_git
}

#provide the user with a progress bar and timings for building Qt
function build_Qt_progress_dialog()
{
  if [ "x$BUILD_QT_MUST_KILL" == "xYes" ]; then
    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_QT_PID

  else

    ( #while true is used as a containment cycle...
    while : ;
    do
      if [ -e "$BUILD_QT_LOG" ]; then
        BUILD_QT_MAKECOUNT=`grep 'make\[.\]' "$BUILD_QT_LOG" | wc -l`
        nowpercent=`expr $BUILD_QT_MAKECOUNT \* 100 / $BUILD_QT_LAST_BUILD_COUNT`
      fi
      if [ "x$nowpercent" != "x$percent" ]; then
        percent=$nowpercent
        BUILD_QT_UPDATE_TIME=`date`
      fi
      echo $percent
      echo "XXX"
      echo "Build Qt ${QT_VERSION}:"
      echo "The build process is going to be logged in the file:"
      echo "  $BUILD_QT_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $BUILD_QT_LOG"
      echo "Either way, please wait, this will take a while..."
      echo -e "\nQt started to build at:\n\t$BUILD_QT_START_TIME\n"
      echo -e "Last progress update made at:\n\t$BUILD_QT_UPDATE_TIME"
      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_QT_PID 30

      if ! ps -p $BUILD_QT_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building Qt" --gauge "Starting..." 20 80 $percent >&4

  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_QT_PID 30
}

#this indicates to the user that we have it under control...
function build_Qt_ctrl_c_triggered()
{
  BUILD_QT_MUST_KILL="Yes"
  build_Qt_progress_dialog
}

function build_Qt()
{
  if [ "x$BUILD_QT" == "xon" ]; then
    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    cd $WM_THIRD_PARTY_DIR

    #set the QT_PLATFORM_PATH variable, since it depends on the OpenFOAM version
    set_QT_PLATFORM_PATH

    #purge existing Qt
    if [ -e "$QT_PLATFORM_PATH" ]; then
      rm -rf $QT_PLATFORM_PATH
    fi

    #set options for building qt - only one, license related
    set_BUILD_QT_OPTION

    BUILD_QT_LOG="${BASE_OFVER_LOG_FOLDER}/build_Qt.log"

    #set up traps...
    trap build_Qt_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build Qt:"

    #launch makeQt asynchronously
    bash -c "time ./makeQt ${BUILD_QT_OPTION}" > "$BUILD_QT_LOG" 2>&1 &
    BUILD_QT_PID=$!
    BUILD_QT_START_TIME=`date`
    BUILD_QT_UPDATE_TIME=$BUILD_QT_START_TIME

    #track build progress
    percent=0
    build_Qt_progress_dialog

    #wait for kill code to change
    clear
    if ! ps -p $BUILD_QT_PID > /dev/null && [ "x$BUILD_QT_MUST_KILL" != "x" ]; then
      echo "Kill code issued with success. The script will continue execution."
    fi

    #clear traps
    trap - SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build Qt ${QT_VERSION}:"
    if [ -e "$QT_PLATFORM_PATH/bin/qmake" ]; then
      echo -e "Qt started to build at:\n\t$BUILD_QT_START_TIME\n"
      echo -e "Building Qt finished successfully at:\n\t`date`"
      echo "Qt is ready to use for building ParaView."
    else
      echo "Build process didn't finished with success. A report with be created at the end of this installation script."
      FOAMINSTALLFAILED="Yes"
      BUILDING_QT_FAILED="Yes"
    fi
    echo "------------------------------------------------------"

  fi
}


#provide the user with a progress bar and timings for building CMake
function build_CMake_progress_dialog()
{
  if [ "x$BUILD_CMAKE_MUST_KILL" == "xYes" ]; then
    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_CMAKE_PID

  else

    ( #while true is used as a containment cycle...
    while : ;
    do
      if [ -e "$CMAKE_BUILD_LOG" ]; then
        BUILD_CMAKE_PROGRESS=`cat "$CMAKE_BUILD_LOG" | grep "^\[" | tail -n 1 | sed 's/^\[\([ 0-9]*\).*/\1/' | sed 's/\ *//'`
      fi
      if [ "x$BUILD_CMAKE_PROGRESS" != "x" -a "x$BUILD_CMAKE_PROGRESS" != "x$percent" ]; then
        percent=$BUILD_CMAKE_PROGRESS
        BUILD_CMAKE_UPDATE_TIME=`date`
      fi
      echo $percent
      echo "XXX"
      echo "Build CMake ${CMAKE_VERSION}:"
      echo "The build process is going to be logged in the file:"
      echo "  $BUILD_CMAKE_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $BUILD_CMAKE_LOG"
      echo "Either way, please wait, this will take a while..."
      echo -e "\nCMake started to build at:\n\t$BUILD_CMAKE_START_TIME\n"
      echo -e "Last progress update made at:\n\t$BUILD_CMAKE_UPDATE_TIME"
      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_CMAKE_PID 30

      if ! ps -p $BUILD_CMAKE_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building CMake" --gauge "Starting..." 20 80 $percent >&4

  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_CMAKE_PID 30
}


#this indicates to the user that we have it under control...
function build_CMake_ctrl_c_triggered()
{
  BUILD_CMAKE_MUST_KILL="Yes"
  build_CMake_progress_dialog
}


function build_CMake()
{
  if [ "x$BUILD_CMAKE" == "xon" ]; then
    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    cd $WM_THIRD_PARTY_DIR

    #set the CMAKE_PATH variable, since it depends on the OpenFOAM version
    set_CMAKE_PATH

    #purge existing Qt
    if [ -e "$CMAKE_PATH" ]; then
      rm -rf $CMAKE_PATH
    fi

    BUILD_CMAKE_LOG="${BASE_OFVER_LOG_FOLDER}/build_CMake.log"

    #set up traps...
    trap build_CMake_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build CMake:"

    #launch makeQt asynchronously
    bash -c "time ./makeCMake" > "$BUILD_CMAKE_LOG" 2>&1 &
    BUILD_CMAKE_PID=$!
    BUILD_CMAKE_START_TIME=`date`
    BUILD_CMAKE_UPDATE_TIME=$BUILD_CMAKE_START_TIME

    #track build progress
    percent=0
    build_CMake_progress_dialog

    #wait for kill code to change
    clear
    if ! ps -p $BUILD_CMAKE_PID > /dev/null && [ "x$BUILD_CMAKE_MUST_KILL" != "x" ]; then
      echo "Kill code issued with success. The script will continue execution."
    fi

    #clear traps
    trap - SIGINT SIGQUIT SIGTERM

    echo "------------------------------------------------------"
    echo "Build CMake ${CMAKE_VERSION}:"
    if [ -e "$CMAKE_PATH/bin/cmake" ]; then
      echo -e "CMake started to build at:\n\t$BUILD_CMAKE_START_TIME\n"
      echo -e "Building CMake finished successfully at:\n\t`date`"
      echo "CMake is ready to use for building ParaView."
    else
      echo "Build process didn't finished with success. A report with be created at the end of this installation script."
      FOAMINSTALLFAILED="Yes"
      BUILDING_CMAKE_FAILED="Yes"
    fi
    echo "------------------------------------------------------"

  fi
}


#provide the user with a progress bar and timings for building ParaView
function build_ParaView_progress_dialog()
{
  if [ "x$BUILD_PARAVIEW_MUST_KILL" == "xYes" ]; then
    echo -e "\n\nKill code issued... please wait..."
    echo -e "NOTE: The kill code will take a few seconds to affect all child processes."
    killgroup $BUILD_PARAVIEW_PID

  else
    ( #while true is used as a containment cycle...
    while : ;
    do
      #get progress value
      if [ -e "$PARAVIEW_BUILD_LOG" ]; then
        BUILD_PARAVIEW_PROGRESS=`cat "$PARAVIEW_BUILD_LOG" | grep "^\[" | tail -n 1 | sed 's/^\[\([ 0-9]*\).*/\1/' | sed 's/\ *//'`
      fi
      if [ "x$BUILD_PARAVIEW_PROGRESS" != "x" -a "x$BUILD_PARAVIEW_PROGRESS" != "x$percent" ]; then
        percent=$BUILD_PARAVIEW_PROGRESS
        BUILD_PARAVIEW_UPDATE_TIME=`date`
      fi

      #get current build stage
      BUILD_PARAVIEW_ISNOWATDOC=`cat "$PARAVIEW_BUILD_LOG" | grep "Creating html documentation" | wc -l`
      BUILD_PARAVIEW_ISNOWFINALIZING=`cat "$PARAVIEW_BUILD_LOG" | grep "Replacing path hard links for" | wc -l`

      echo $percent
      echo "XXX"
      echo "Build ParaView:"
      echo "The build process is going to be logged in the file:"
      echo "  $PARAVIEW_BUILD_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $PARAVIEW_BUILD_LOG"
      echo "Either way, please wait, this will take a while..."
      echo -e "\nParaView started to build at:\n\t$BUILD_PARAVIEW_START_TIME\n"
      echo -e "Last progress update made at:\n\t$BUILD_PARAVIEW_UPDATE_TIME\n"

      if [ "x$BUILD_PARAVIEW_ISNOWATDOC" != "x0" -a "x$BUILD_PARAVIEW_ISNOWFINALIZING" == "x0" ]; then
        echo "Building HTML documentation for ParaView..."
      elif [ "x$BUILD_PARAVIEW_ISNOWFINALIZING" != "x0" ]; then
        echo "Finalizing... almost complete..."
      fi

      echo "XXX"

      #this provides a better monitorization of the process itself... i.e., if it has already stopped!
      #30 second update
      monitor_sleep $BUILD_PARAVIEW_PID 30

      if ! ps -p $BUILD_PARAVIEW_PID > /dev/null; then
        break;
      fi
    done
    ) | dialog --backtitle "$GUI_BACKTITLE" \
        --title "Building ParaView" --gauge "Starting..." 20 80 $percent >&4

  fi

  #monitor here too, to wait for kill code, when issued
  monitor_sleep $BUILD_PARAVIEW_PID 30
}

#this indicates to the user that we have it under control...
function build_ParaView_ctrl_c_triggered()
{
  BUILD_PARAVIEW_MUST_KILL="Yes"
  build_ParaView_progress_dialog
}

function hookup_Qt_Libs_with_ParaView()
{
  if [ "x$BUILD_QT" == "xon" ]; then
    for a in ${QT_PLATFORM_PATH}/lib/*.4; do
      b=`echo $a | sed -e 's/.*\/\(.*\)$/\1/'`
      ln -s $a ${ParaView_DIR}/bin/$b
    done
  fi
}

function build_ParaView()
{
  if [ "x$BUILD_PARAVIEW" == "xon" ]; then

    if [ "x$BUILD_QT" == "xon" -a "x$BUILDING_QT_FAILED" == "xYes" ]; then

      echo "------------------------------------------------------"
      echo "The requested Qt is unavailable, thus rendering impossible to build ParaView with it."
      echo "------------------------------------------------------"

    else

      #set up environment, just in case we forget about it!
      if [ "x$WM_PROJECT_DIR" == "x" ]; then
        setOpenFOAMEnv
      fi

      cd $WM_THIRD_PARTY_DIR

      #purge existing ParaView
      if [ -e "$ParaView_DIR" ]; then
        rm -rf $ParaView_DIR
      fi

      PARAVIEW_BUILD_OPTIONS=""
      if [ "x$BUILD_QT" == "xon" ]; then
        PARAVIEW_BUILD_OPTIONS="$PARAVIEW_BUILD_OPTIONS -qmake \"$QT_PLATFORM_PATH/bin/qmake\""
      fi

      if [ "x$BUILD_PARAVIEW_WITH_GUI" == "xoff" ]; then
        PARAVIEW_BUILD_OPTIONS="$PARAVIEW_BUILD_OPTIONS -noqt"
      fi

      if [ "x$BUILD_PARAVIEW_WITH_MPI" == "xon" ]; then
        PARAVIEW_BUILD_OPTIONS="$PARAVIEW_BUILD_OPTIONS -mpi"
      fi

      if [ "x$BUILD_PARAVIEW_WITH_PYTHON" == "xon" ]; then
        PARAVIEW_BUILD_OPTIONS="$PARAVIEW_BUILD_OPTIONS -python"
      fi

      if [ "x$BUILD_PARAVIEW_WITH_OSMESA" == "xon" ]; then
        PARAVIEW_BUILD_OPTIONS="$PARAVIEW_BUILD_OPTIONS -mesa"
      fi

      PARAVIEW_BUILD_LOG="${BASE_OFVER_LOG_FOLDER}/build_ParaView.log"

      #set up traps...
      trap build_ParaView_ctrl_c_triggered SIGINT SIGQUIT SIGTERM

      echo "------------------------------------------------------"
      echo "Build ParaView:"

      #launch makeParaView asynchronously
      bash -c "time ./makeParaView $PARAVIEW_BUILD_OPTIONS" > "$PARAVIEW_BUILD_LOG" 2>&1 &
      BUILD_PARAVIEW_PID=$!
      BUILD_PARAVIEW_START_TIME=`date`
      BUILD_PARAVIEW_UPDATE_TIME=$BUILD_PARAVIEW_START_TIME

      #track build progress
      percent=0
      build_ParaView_progress_dialog

      #wait for kill code to change
      clear
      if ! ps -p $BUILD_PARAVIEW_PID > /dev/null && [ "x$BUILD_PARAVIEW_MUST_KILL" != "x" ]; then
        echo "Kill code issued with success. The script will continue execution."
      fi

      #clear traps
      trap - SIGINT SIGQUIT SIGTERM

      echo "------------------------------------------------------"
      echo "Build ParaView:"
      if [ -e "$ParaView_DIR/bin/paraview" ]; then

        #this will make links in ParaView's bin folder to the custom build of Qt's libraries
        hookup_Qt_Libs_with_ParaView

        echo -e "ParaView started to build at:\n\t$BUILD_PARAVIEW_START_TIME\n"
        echo -e "Building ParaView finished successfully at:\n\t`date`"
        echo "ParaView is ready to use."

      elif [ "x$BUILD_PARAVIEW_WITH_GUI" == "xoff" -a "x$BUILD_PARAVIEW_WITH_MPI" == "xon" -a \
             -e "$ParaView_DIR/bin/pvserver" -a -e "$ParaView_DIR/bin/pvrenderserver" -a \
             -e "$ParaView_DIR/bin/pvdataserver" ]; then

        #this will make links in ParaView's bin folder to the custom build of Qt's libraries
        hookup_Qt_Libs_with_ParaView

        echo -e "ParaView started to build at:\n\t$BUILD_PARAVIEW_START_TIME\n"
        echo -e "Building ParaView finished successfully at:\n\t`date`"
        echo "ParaView server tools are ready to be used."

      else

        echo "Build process didn't finished with success. A report with be created at the end of this installation script."
        FOAMINSTALLFAILED="Yes"
        BUILDING_PARAVIEW_FAILED="Yes"
      fi
      echo "------------------------------------------------------"

    fi
  fi
}

function build_PV3FoamReader()
{
  if [ "x$BUILD_PARAVIEW" == "xon" ]; then

    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    if [ "x$BUILD_QT" == "xon" -a "x$BUILDING_QT_FAILED" == "xYes" ]; then

      echo "------------------------------------------------------"
      echo "No Qt, no ParaView, thus no PV3FoamReader."
      echo "------------------------------------------------------"

    elif [ ! -e "$ParaView_DIR/bin/paraview" ]; then

      echo "------------------------------------------------------"
      echo "ParaView isn't available where it is expected:"
      echo "  $ParaView_DIR/bin/paraview"
      echo "Therefore it isn't possible to proceed with building the plugin PV3FoamReader."
      echo "------------------------------------------------------"

    else

      cd "$FOAM_UTILITIES/postProcessing/graphics/PV3FoamReader"

      PV3FOAMREADER_BUILD_LOG="${BASE_OFVER_LOG_FOLDER}/build_PV3FoamReader.log"

      echo "------------------------------------------------------"
      echo "Build PV3FoamReader for ParaView:"
      echo "The build process is going to be logged in the file:"
      echo "  $PV3FOAMREADER_BUILD_LOG"
      echo "If you want to, you can follow the progress of this build"
      echo "process by opening a new terminal and running:"
      echo "  tail -F $PV3FOAMREADER_BUILD_LOG"
      echo "Either way, please wait, this will take a while..."

      bash -c "time ./Allwclean" > "$PV3FOAMREADER_BUILD_LOG" 2>&1
      echo -e "\n\n" >> "$PV3FOAMREADER_BUILD_LOG"
      export WM_DO_TIMINGS="Yes"
      bash -c "time wmake all" >> "$PV3FOAMREADER_BUILD_LOG" 2>&1
      export WM_DO_TIMINGS=

      #This is for OpenFOAM 1.6
      if [ -e "$FOAM_LIBBIN/libvtkPV3Foam.so" -a -e "$FOAM_LIBBIN/libPV3FoamReader.so" -a -e "$FOAM_LIBBIN/libPV3FoamReader_SM.so" ]; then
        echo "Build process finished successfully: paraFoam is ready to use."
      #This is for OpenFOAM 1.7
      elif [ -e "$FOAM_LIBBIN/libvtkPV3Foam.so" -a -e "$FOAM_LIBBIN/libPV3FoamReaders.so" ]; then
        echo "Build process finished successfully: paraFoam is ready to use."
      else
        echo "Build process didn't finished with success. A report with be created at the end of this installation script."
        FOAMINSTALLFAILED="Yes"
        PV3FOAMREADERFAILED="Yes"
      fi
      echo "------------------------------------------------------"
    fi
  fi
}

function build_ccm26ToFoam()
{

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    #set up environment, just in case we forget about it!
    if [ "x$WM_PROJECT_DIR" == "x" ]; then
      setOpenFOAMEnv
    fi

    cd "$FOAM_APP/utilities/mesh/conversion/Optional"

    BUILD_CCM26TOFOAM_LOG="${BASE_OFVER_LOG_FOLDER}/build_ccm26.log"

    echo "------------------------------------------------------"
    echo "Build ccm26ToFoam:"
    echo "This will also build the libccmio library, which requires "
    echo "specify downloading of the files for it."
    echo "The build process is going to be logged in the file:"
    echo "  $BUILD_CCM26TOFOAM_LOG"
    echo "If you want to, you can follow the progress of this build"
    echo "process by opening a new terminal and running:"
    echo "  tail -F $BUILD_CCM26TOFOAM_LOG"
    echo "Either way, please wait, this will take a while..."

    export WM_DO_TIMINGS="Yes"
    bash -c "time wmake all" > "$BUILD_CCM26TOFOAM_LOG" 2>&1
    export WM_DO_TIMINGS=

    if [ -e "$FOAM_APPBIN/ccm26ToFoam" ]; then
      echo "Build process finished successfully: ccm26ToFoam is ready to use."
    else
      echo "Build process didn't finished with success. A report with be created at the end of this installation script."
      FOAMINSTALLFAILED="Yes"
      CCM26INSTALLFAILED="Yes"
    fi
    echo "------------------------------------------------------"
  fi
}
