#!/bin/bash
#-----------------------------------------------------------------------
#   Nucleation - Nucleation (an unofficial OpenFOAM Installer) lower
#the work to have foam in your system.
#
#   visit: http://code.google.com/p/nucleation/
#
#-----------------------------------------------------------------------
#    This file is part of Nucleation.
#
#    Nucleation is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Nucleation is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nucleation.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------

#-- MAIN FUNCTIONS ------------------------------------------------------
#list of functions herein:

#global variables used by this script:


#Code -----------------------------------------
echo "Sourcing Main functions for OpenFOAM ${OF_LONG_VERSION} ..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/${INST_SYSTEM}/main_functions
else
  echo "The variable INST_SYSTEM and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi

#FUNCTIONS ------------------------------------------------------------------------------

#Defining packages and servers to download from
#NOTE: This function must always exist!
function define_packages_to_download()
{

  #OpenFOAM's sourceforge repository
  OPENFOAM_SOURCEFORGE="http://downloads.sourceforge.net/foam"
  SOURCEFORGE_URL_OPTIONS="?use_mirror=$mirror"

  #OpenFOAM's Git repository
  #OPENFOAM_GIT_REPO="git://github.com/OpenCFD/OpenFOAM-${OF_LONG_VERSION}.git"
  OPENFOAM_GIT_REPO="http://repo.or.cz/r/OpenFOAM-${OF_LONG_VERSION}.git" #had to resort to the mirror, due to github issues...

  #Third Party files to download
  THIRDPARTY_GENERAL="ThirdParty-1.7.1.gtgz"

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    #Kitware paraview files to download if USE_KITWARE_PV is selected
    KV_PV_BASEURL="http://www.paraview.org/files/v3.8"
    if [ "$arch" == "x64" ]; then
      #need dir for untaring
      KV_PV_FILE="ParaView-3.8.0-Linux-x86_64.tar.gz"
      KV_PV_DIR="ParaView-3.8.0-Linux-x86_64"
    elif [ "$arch" == "x86" ]; then
      KV_PV_FILE="ParaView-3.8.0-Linux-i686.tar.gz"
      KV_PV_DIR="ParaView-3.8.0-Linux-i686"
    else
      echo "Sorry, architecture not recognized, aborting."
      exit 1
    fi
  fi

  if [ "x$BUILD_QT" == "xon" ]; then
    QT_VERSION=4.6.3
    QT_BASEURL="ftp://ftp.trolltech.com/qt/source"
    QT_PACKAGEFILE="qt-everywhere-opensource-src-$QT_VERSION.tar.gz"
  fi

  if [ "x$BUILD_CMAKE" == "xon" ]; then
    CMAKE_VERSION=2.8.1
    CMAKE_BASEURL="http://www.cmake.org/files/v2.8"
    CMAKE_PACKAGEFILE="cmake-$CMAKE_VERSION.tar.gz"
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    CCMIO_PACKAGE_VERSION=libccmio-2.6.1
    CCMIO_PACKAGE="${CCMIO_PACKAGE_VERSION}.tar.gz"
    CCMIO_BASEURL="https://wci.llnl.gov/codes/visit/3rd_party"
    CCMIO_BASEURL_EXTRA_PRE="--no-check-certificate"
  fi

  #also add packages pertinent to each system
  define_packages_to_download_system
}

#Define files (including paths) to the files this script provides for of$OF_SHORT_VERSION
#NOTE: This function must always exist!
function define_script_s_files_ofv()
{
  #Define files (including paths) to the files this script provides for of$OF_SHORT_VERSION/system
  define_script_s_files_ofv_system

  #modified build-gcc scripts for building gcc for building OpenFOAM
  GCCMODED_BUILD_GCC44_SCRIPT[0]="build-gcc44"
  GCCMODED_BUILD_GCC44_SCRIPT[1]="${SCRIPT_WORKFOLDER}/common/files/${GCCMODED_BUILD_GCC44_SCRIPT[0]}"
  GCCMODED_BUILD_GCC45_SCRIPT[0]="build-gcc45"
  GCCMODED_BUILD_GCC45_SCRIPT[1]="${SCRIPT_WORKFOLDER}/common/files/${GCCMODED_BUILD_GCC45_SCRIPT[0]}"
  GCCMODED_AUX_SCRIPT[0]="makeExtraThirdPartyFunctions"
  GCCMODED_AUX_SCRIPT[1]="${SCRIPT_WORKFOLDER}/common/files/${GCCMODED_AUX_SCRIPT[0]}"

  #define gcc variables and files
  if [ "x$BUILD_GCC" == "xon" ]; then
    if [ "x$GCC_VERSION_OPTION" == "x45" ]; then
      GCC_VERSION=4.5.1
      GCCMODED_MAKESCRIPT=$GCCMODED_BUILD_GCC45_SCRIPT
    else #if [ "x$GCC_VERSION_OPTION" == "x44" ]; then
      GCC_VERSION=4.4.4
      GCCMODED_MAKESCRIPT=$GCCMODED_BUILD_GCC44_SCRIPT
    fi
  fi

  #file with md5 sums for OpenFOAM 1.7.1 files
  OPENFOAMMD5SUMSFILE[0]="OFpackages.md5"
  OPENFOAMMD5SUMSFILE[1]="${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/files/${OPENFOAMMD5SUMSFILE[0]}"

  #define file for building Qt
  MAKEQTFILE[0]="makeQt"
  MAKEQTFILE[1]="${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/files/${MAKEQTFILE[0]}"

  #define file for building CMake
  MAKECMAKEFILE[0]="makeCMake"
  MAKECMAKEFILE[1]="${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/files/${MAKECMAKEFILE[0]}"

  #patch file for ThirdParty Allwmake
  #source: http://www.openfoam.com/mantisbt/view.php?id=79
  TPAMPATCHFILE[0]="ThirdParty_Allwmake.diff"
  TPAMPATCHFILE[1]="${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/files/${TPAMPATCHFILE[0]}"
}


#Download necessary files
function download_files()
{
  cd_base_downloads #this is a precautionary measure

  #generate md5 sums for "md5sum -check"ing :)
  #No longer needed since OpenFOAM 1.7 was released...
  ##get_md5sums_for_OFpackages

  #Download Third Party files for detected system and selected mirror
  #download Third Party sources
  do_wget_md5sum "$OPENFOAM_SOURCEFORGE" "$THIRDPARTY_GENERAL" "$SOURCEFORGE_URL_OPTIONS" "${OPENFOAMMD5SUMSFILE[1]}"

  if [ "x$BUILD_QT" == "xon" ]; then
    do_wget "$QT_BASEURL" "$QT_PACKAGEFILE"
  fi

  if [ "x$BUILD_CMAKE" == "xon" ]; then
    do_wget "$CMAKE_BASEURL" "$CMAKE_PACKAGEFILE"
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    do_wget "$CCMIO_BASEURL" "$CCMIO_PACKAGE" " " "$CCMIO_BASEURL_EXTRA_PRE"
  fi

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    #get paraview 3.8 from kitware, which has native openfoam reader
    do_wget "$KV_PV_BASEURL" "$KV_PV_FILE"
  fi
}

#Unpack downloaded files
#NOTE: This function must always exist!
function unpack_downloaded_files()
{
  cd_openfoam #this is a precautionary measure

  echo "------------------------------------------------------"
  echo "Untar files -- This can take time"
  if [ "x$INSTALLMODE" != "xcustom" ]; then
    echo "Untaring $THIRDPARTY_GENERAL"
    unTar z $BASE_DOWNLOADS_FOLDER/$THIRDPARTY_GENERAL
  fi

  #Link ThirdParty 1.7.1 to 1.7.x - redo the link if necessary, just in case...
  if [ -L "$PATHOF/ThirdParty-${OF_LONG_VERSION}" ]; then
    unlink "$PATHOF/ThirdParty-${OF_LONG_VERSION}"
  fi
  ln -s "$PATHOF/ThirdParty-1.7.1" "$PATHOF/ThirdParty-${OF_LONG_VERSION}"

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    cd_openfoam
    echo "Untaring $KV_PV_FILE"
    unTar z $BASE_DOWNLOADS_FOLDER/$KV_PV_FILE
    #put ParaView in 3rd Party directory
    mv "$KV_PV_DIR" "ThirdParty-${OF_LONG_VERSION}/$KV_PV_DIR"
  fi

  if [ "x$BUILD_QT" == "xon" ]; then
    cd_thirdparty
    echo "Untaring $QT_PACKAGEFILE"
    unTar z $BASE_DOWNLOADS_FOLDER/$QT_PACKAGEFILE

    #copy makeQt script
    cp ${MAKEQTFILE[1]} .
    chmod +x ${MAKEQTFILE[0]}
  fi

  if [ "x$BUILD_CMAKE" == "xon" ]; then
    cd_thirdparty
    echo "Untaring $CMAKE_PACKAGEFILE"
    unTar z $BASE_DOWNLOADS_FOLDER/$CMAKE_PACKAGEFILE

    #copy makeCMake script
    cp ${MAKECMAKEFILE[1]} .
    chmod +x ${MAKECMAKEFILE[0]}
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    cd_thirdparty
    if [ -L download/$CCMIO_PACKAGE ]; then unlink download/$CCMIO_PACKAGE; fi
    if [ ! -e download/$CCMIO_PACKAGE ]; then
      ln -s $BASE_DOWNLOADS_FOLDER/$CCMIO_PACKAGE download/$CCMIO_PACKAGE
    fi
    #NOTE: unpacking will be done by the AllwmakeLibccmio script
  fi

  #copy modified build-gcc scripts to here
  cd_thirdparty
  if [ "x${GCCMODED_BUILD_GCC44_SCRIPT[0]}" != "x" ]; then
    cp ${GCCMODED_BUILD_GCC44_SCRIPT[1]} .
    chmod +x ${GCCMODED_BUILD_GCC44_SCRIPT[0]}
  fi
  if [ "x${GCCMODED_BUILD_GCC45_SCRIPT[0]}" != "x" ]; then
    cp ${GCCMODED_BUILD_GCC45_SCRIPT[1]} .
    chmod +x ${GCCMODED_BUILD_GCC45_SCRIPT[0]}
  fi
  if [ "x${GCCMODED_AUX_SCRIPT[0]}" != "x" ]; then
    cp ${GCCMODED_AUX_SCRIPT[1]} tools/
  fi
  echo "------------------------------------------------------"
}

#NOTE: This function must always exist!
function process_online_log_of_timings()
{
  #TODO: this value is hard coded for now, since it should come from the output of our timings script
  #The total count of "make[.]" found in our build_Qt.log
  BUILD_QT_LAST_BUILD_COUNT=451

  #TODO: this value is hard coded for now, since it should come from the output of our timings script
  #The total count of "make[.]" found in our build_gcc.log
  if [ "x$GCC_VERSION_OPTION" == "x45" ]; then
    BUILD_GCC_LAST_BUILD_COUNT=817
  else #if [ "x$GCC_VERSION_OPTION" == "x44" ]; then
    BUILD_GCC_LAST_BUILD_COUNT=745
  fi

  # NOTE:
  #  - ParaView has its own percentage, so we just lift from it
  #  - OpenFOAM uses wmake, making it relatively easier to estimate automatically,
  #    thus automatically adapting to new additions in the git repository
}

#set the gcc root path for OpenFOAM 1.7.x
#NOTE: This function must always exist!
function set_BUILD_GCC_ROOT()
{
  BUILD_GCC_ROOT="$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/gcc-$GCC_VERSION"
}

#set options for building gcc (script dependent)
#NOTE: This function must always exist!
function set_BUILD_GCC_OPTION()
{
  BUILD_GCC_OPTION="--verbose"
}

#It will request any fixes deemed necessary to gcc after it is built
#NOTE: This function must always exist!
function fix_gcc_if_necessary()
{
  #the assessment is that it depends on the target system, so this won't be done directly here
  #but instead call:
  fix_gcc_if_necessary_system
}

#set the Qt root path for OpenFOAM 1.7.x
#NOTE: This function must always exist!
function set_QT_PLATFORM_PATH()
{
  QT_PLATFORM_PATH="${WM_THIRD_PARTY_DIR}/platforms/$WM_ARCH$WM_COMPILER_ARCH/qt-everywhere-opensource-src-${QT_VERSION}"
}

#set options for building qt - only one, license related
#NOTE: This function must always exist!
function set_BUILD_QT_OPTION()
{
  BUILD_QT_OPTION="-opensource --confirm-license=yes"
}

#set the CMake root path for OpenFOAM 1.7.x
#NOTE: This function must always exist!
function set_CMAKE_PATH()
{
  CMAKE_PATH="${WM_THIRD_PARTY_DIR}/platforms/$WM_ARCH$WM_COMPILER/cmake-${CMAKE_VERSION}"
}
