#!/bin/bash

#-- PATCHING FUNCTIONS ------------------------------------------------------
#list of functions herein:

#global variables used by this script:
#   INST_SYSTEM - System variant for installation - defined in the master script
#   SCRIPT_WORKFOLDER - the folder where the main script's dependency files are located
#   OF_SHORT_VERSION - the short version of OpenFOAM to be installed. Example: 16x
#   OF_LONG_VERSION - the long version of OpenFOAM to be installed. Example: 1.6.x

#Code -----------------------------------------
echo "Sourcing patching functions for OpenFOAM ${OF_LONG_VERSION}..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x$OF_SHORT_VERSION" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/${INST_SYSTEM}/patches
else
  echo "The variable INST_SYSTEM and/or OF_SHORT_VERSION is/are empty and both are crucial to exist! Aborting execution."
  exit 1
fi


#-- FUNCTIONS -----------------------------------------------------

#apply patches and fixes
#NOTE: This function must always exist!
function apply_patches()
{
  cd_openfoam #this is a precautionary measure

  #PATCHES ----
  #Apply patches from defined functions
  echo "------------------------------------------------------"
  echo "Applying patches to bashrc and settings.sh ..."
  echo "------------------------------------------------------"
  if [ "x$HOME/OpenFOAM" != "x$PATHOF" ]; then #fix OpenFOAM base path in bashrc
    patchBashrcPath
  fi

  #reset preferences prefs.sh
  resetPrefsSH

  #add multi-core to prefs.sh
  patchBashrcMultiCore #for faster builds on multi-core machines
  #add proper fix for running in 32bit to prefs.sh
  if [ "$arch" == "x86" ]; then
    patchBashrcTo32
  fi

  #Define compiler mode to use in prefs.sh
  if [ "x$USE_OF_GCC" == "xoff" ]; then
    patchSettingsToSystemCompiler
  else
    patchSettingsToOpenFOAMCompiler
  fi

  #Define that the system's OpenMPI should be used in prefs.sh
  if [ "x$USE_SYSTEM_OPENMPI" == "xon" ]; then
    patchBashrcToSystemOpenMPI
  fi

  #apply patches for wmake script, makeParaView script and libccmio
  patchWmakeForTimings
  patchMakeParaViewScript

  if [ "x$USE_REPO_PV" == "xon" -o "x$USE_KITWARE_PV" == "xon" ]; then
    #First copy paraFoamSys to OpenFOAM's bin folder
    cd_openfoam
    cp "${PFOAM_PATCHFILE[1]}" OpenFOAM-${OF_LONG_VERSION}/bin/
    chmod +x OpenFOAM-${OF_LONG_VERSION}/bin/${PFOAM_PATCHFILE[0]}

    #Now patch it up
    patchParaFoamSys
  fi

  #patch ThirdParty's Allwmake
  patchTPAllwmake

  #apply patches associated with the system itself
  apply_patches_system
}


#patch bashrc path so it will reflect the chosen $PATHOF
function patchBashrcPath()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- bashrc.orig 2010-11-07 12:27:16.000000000 +0000
+++ bashrc  2010-11-07 12:30:33.000000000 +0000
@@ -42,7 +42,7 @@
 #
 # Location of the OpenFOAM installation
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-foamInstall=$HOME/$WM_PROJECT
+foamInstall='${PATHOF}'
 # foamInstall=~$WM_PROJECT
 # foamInstall=/usr/local/$WM_PROJECT
 # foamInstall=/opt/$WM_PROJECT
@@ -67,7 +67,7 @@
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
 export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
-export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$FOAM_INST_DIR/$USER-$WM_PROJECT_VERSION

 # Location of third-party software
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' | patch -p0

cd $tmpVar
unset tmpVar
}

function resetPrefsSH()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo "#This file was generated automatically by one of the scripts available here:" > prefs.sh
  echo "#$MAIN_PAGE_URL" >> prefs.sh
  echo "#This way it's unnecessary to over-patch bashrc." >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#Patch to compile using multicore
function patchBashrcMultiCore()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo '' >> prefs.sh
  echo '#' >> prefs.sh
  echo '# Set the number of cores to build on' >> prefs.sh
  echo '#' >> prefs.sh
  echo 'WM_NCOMPPROCS=1' >> prefs.sh
  echo '' >> prefs.sh
  echo 'if [ -r /proc/cpuinfo ]' >> prefs.sh
  echo 'then' >> prefs.sh
  echo '    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)' >> prefs.sh
  echo '    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8' >> prefs.sh
  echo 'fi' >> prefs.sh
  echo '' >> prefs.sh
  echo 'echo "Building on " $WM_NCOMPPROCS " cores"' >> prefs.sh
  echo 'export WM_NCOMPPROCS' >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#Patch to work on 32-bit versions
function patchBashrcTo32()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo '' >> prefs.sh
  echo 'export WM_ARCH_OPTION=32' >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#patch the bashrc file for using the system's OpenMPI
function patchBashrcToSystemOpenMPI()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo '' >> prefs.sh
  echo 'export WM_MPLIB=SYSTEMOPENMPI' >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#Patch to use System compiler
function patchSettingsToSystemCompiler()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo '' >> prefs.sh
  echo 'compilerInstall=System' >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#Patch to use OpenFOAM compiler
function patchSettingsToOpenFOAMCompiler()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/etc/

  echo '' >> prefs.sh
  echo 'compilerInstall=OpenFOAM' >> prefs.sh

  cd $tmpVar
  unset tmpVar
}

#patch makeParaView script to allow -noqt option
function patchMakeParaViewScript()
{
tmpVar=$PWD
cd_thirdparty

echo '--- makeParaView.orig 2010-06-24 11:49:40.000000000 +0100
+++ makeParaView  2010-11-07 13:42:43.000000000 +0000
@@ -53,13 +53,13 @@
 # note: script will try to determine the appropriate python library.
 #       If it fails, specify the path using the PYTHON_LIBRARY variable
 withPYTHON=false
-PYTHON_LIBRARY=""
+PYTHON_LIBRARY="/usr/lib/libpython2.6.so"
 # PYTHON_LIBRARY="/usr/lib64/libpython2.6.so.1.0"

 # MESA graphics support:
 withMESA=false
 MESA_INCLUDE="/usr/include/GL"
-MESA_LIBRARY="/usr/lib64/libOSMesa.so"
+MESA_LIBRARY="/usr/lib/libOSMesa.so"

 # extra QT gui support (useful for some third party apps)
 withQT=true
--- tools/makeParaViewFunctions.orig  2010-04-26 11:26:16.000000000 +0100
+++ tools/makeParaViewFunctions 2010-11-07 13:45:45.000000000 +0000
@@ -267,7 +267,7 @@

 addQtSupport()
 {
-    [ "${withQT:=false}" = true ] || return
+  if [ "${withQT:=false}" = true ]; then

     addCMakeVariable "PARAVIEW_BUILD_QT_GUI=ON"

@@ -309,6 +309,11 @@
         echo "*** Error: cannot find qmake either at \$QMAKE_PATH or in current \$PATH"
         exit 1
     fi
+  else
+    addCMakeVariable "PARAVIEW_BUILD_QT_GUI=OFF"
+    addCMakeVariable "PointSpritePlugin_BUILD_EXAMPLES=OFF"
+    addCMakeVariable "PARAVIEW_BUILD_PLUGIN_PointSprite=OFF"
+  fi
 }


' | patch -p0
cd $tmpVar
unset tmpVar
}

#Patch wmake to provide timings upon request via WM_DO_TIMINGS
function patchWmakeForTimings()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/wmake/

  patch -p0 < "${WMAKEPATCHFILE[1]}"

  cd $tmpVar
  unset tmpVar
}

#Patch paraFoamSys
function patchParaFoamSys()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/bin/

  #add system paraview to path
  if [ "x$USE_REPO_PV" == "xon" ]; then
      echo 'patching paraFoamSys to use repository PV'
      sed -i -e 's/PV_EXE=/PV_EXE=\/usr\/bin\/paraview/' "./${PFOAM_PATCHFILE}"
  fi

  #add kitware paraview to path
  if [ "x$USE_KITWARE_PV" == "xon" ]; then
      echo 'patching paraFoamSys to use Kitware PV'
      #escape pathof
      ESC_PATHOF=`echo $PATHOF | sed 's/\//\\\\\//g' `
      ESC_KV_PV_DIR=`echo $KV_PV_DIR | sed 's/\//\\\\\//g' `
      sed -i -e 's/PV_EXE=/PV_EXE='$ESC_PATHOF'\/ThirdParty-${OF_LONG_VERSION}\/'$ESC_KV_PV_DIR'\/bin\/paraview/' "./${PFOAM_PATCHFILE}"
  fi

  #check paraview version
  #PV writes version string to stderr...
  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    cd $PATHOF/ThirdParty-${OF_LONG_VERSION}/$KV_PV_DIR/bin
    Paraview_VERSION="$(./paraview -V 2>&1 | awk -F'View' '{print $2}')"
    cd_openfoam
    cd OpenFOAM-${OF_LONG_VERSION}/bin/
  elif [ "x$USE_REPO_PV" == "xYes" ]; then
    Paraview_VERSION="$(/usr/bin/paraview -V 2>&1 | awk -F'View' '{print $2}')"
    cd_openfoam
    cd OpenFOAM-${OF_LONG_VERSION}/bin/
  else
    Paraview_VERSION="$(paraview -V 2>&1 | awk -F'View' '{print $2}')"
  fi

  #include version variable in .bashrc so we can use this in paraFoamSys
  if [ "x$Paraview_VERSION" == "x" ]; then
      echo "Paraview version could not be determined!"
  else

  sed -i -e 's/export Paraview_VERSION=/export Paraview_VERSION='$Paraview_VERSION'/' "./${PFOAM_PATCHFILE[0]}"

  fi

  cd $tmpVar
  unset tmpVar
}

#Patch file ThirdParty's Allwmake
function patchTPAllwmake()
{
tmpVar=$PWD
cd_thirdparty

if [ -e "${TPAMPATCHFILE[1]}" ]; then
  patch -p0 < ${TPAMPATCHFILE[1]}
fi

cd $tmpVar
unset tmpVar
}
