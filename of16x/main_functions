#!/bin/bash

#-- MAIN FUNCTIONS ------------------------------------------------------
#list of functions herein:

#global variables used by this script:


#Code -----------------------------------------
echo "Sourcing Main functions for OpenFOAM 1.6.x ..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x${SCRIPT_WORKFOLDER}" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/${INST_SYSTEM}/main_functions
else
  echo "The variable INST_SYSTEM and/or SCRIPT_WORKFOLDER is/are empty and they are crucial to exist! Aborting execution."
  exit 1
fi

#FUNCTIONS ------------------------------------------------------------------------------

#Defining packages and servers to download from
function define_packages_to_download()
{

  #OpenFOAM's sourceforge repository
  OPENFOAM_SOURCEFORGE="http://downloads.sourceforge.net/foam/"
  SOURCEFORGE_URL_OPTIONS="?use_mirror=$mirror"

  #Third Party files to download
  THIRDPARTY_GENERAL="ThirdParty-1.6.General.gtgz"
  if [ "$arch" == "x64" ]; then
    THIRDPARTY_BIN="ThirdParty-1.6.linux64Gcc.gtgz"

    if isleftlarger_or_equal 8.04 $SYSTEM_VERSION || isleftlarger_or_equal $SYSTEM_VERSION 10.04; then
      THIRDPARTY_BIN_CMAKE="ThirdParty-1.6.linuxGcc.gtgz"
    fi
  elif [ "$arch" == "x86" ]; then
    THIRDPARTY_BIN="ThirdParty-1.6.linuxGcc.gtgz"
  fi

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    #Kitware paraview files to download if USE_KITWARE_PV is selected
    KV_PV_BASEURL="http://www.paraview.org/files/v3.8/"
    if [ "$arch" == "x86_64" ]; then
      #need dir for untaring
      KV_PV_FILE="ParaView-3.8.0-Linux-x86_64.tar.gz"
      KV_PV_DIR="ParaView-3.8.0-Linux-x86_64"
    elif [ x`echo $arch | grep -e "i.86"` != "x" ]; then
      KV_PV_FILE="ParaView-3.8.0-Linux-i686.tar.gz"
      KV_PV_DIR="ParaView-3.8.0-Linux-i686"
    else
      echo "Sorry, architecture not recognized, aborting."
      exit 1
    fi
  fi

  if [ "x$BUILD_QT" == "xon" ]; then
    QT_VERSION=4.3.5
    QT_BASEURL="ftp://ftp.trolltech.com/qt/source/"
    QT_PACKAGEFILE="qt-x11-opensource-src-$QT_VERSION.tar.bz2"
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    CCMIO_PACKAGE_VERSION=libccmio-2.6.1
    CCMIO_PACKAGE="${CCMIO_PACKAGE_VERSION}.tar.gz"
    CCMIO_BASEURL="https://wci.llnl.gov/codes/visit/3rd_party/"
    CCMIO_BASEURL_EXTRA_PRE="--no-check-certificate"
  fi
}

#Define files (including paths) to the files this script provides for of$OF_SHORT_VERSION
function define_script_s_files_ofv()
{
  #Define files (including paths) to the files this script provides for of$OF_SHORT_VERSION/system
  define_script_s_files_ofv_system

  #modified makeGcc for building gcc that comes with OpenFOAM
  GCCMODED_MAKESCRIPT[0]="makeGcc433"
  GCCMODED_MAKESCRIPT[1]="${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/files/${GCCMODED_MAKESCRIPT[0]}"

  #patch file for MPFR for gcc 4.3.3 to build properly
  MPFRPATCHFILE[0]="patchMPFR"
  MPFRPATCHFILE[1]="${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/files/${MPFRPATCHFILE[0]}"

  #file with md5 sums for OpenFOAM 1.6 files
  OPENFOAMMD5SUMSFILE[0]="OFpackages.md5"
  OPENFOAMMD5SUMSFILE[1]="${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/files/${OPENFOAMMD5SUMSFILE[0]}"

  #files for building libccmio
  CCMIO_MAKEFILES_FILES[0]="files.AllwmakeLibccmio"
  CCMIO_MAKEFILES_FILES[1]="${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/files/${CCMIO_MAKEFILES_FILES[0]}"

  CCMIO_MAKEFILES_OPTIONS[0]="options.AllwmakeLibccmio"
  CCMIO_MAKEFILES_OPTIONS[1]="${SCRIPT_WORKFOLDER}/of${OF_SHORT_VERSION}/files/${CCMIO_MAKEFILES_OPTIONS[0]}"
}


#Download necessary files
function download_files()
{
  cd_openfoam #this is a precautionary measure

  #generate md5 sums for "md5sum -check"ing :)
  #No longer needed since OpenFOAM 1.7 was released...
  ##get_md5sums_for_OFpackages

  #Download Third Party files for detected system and selected mirror
  #download Third Party sources
  do_wget_md5sum "$OPENFOAM_SOURCEFORGE" "$THIRDPARTY_GENERAL" "$SOURCEFORGE_URL_OPTIONS" "${OPENFOAMMD5SUMSFILE[1]}"

  #download Third Party binaries, but only if requested and necessary!
  if [ "x$THIRDPARTY_BIN" != "x" ]; then
    do_wget_md5sum "$OPENFOAM_SOURCEFORGE" "$THIRDPARTY_BIN" "$SOURCEFORGE_URL_OPTIONS" "${OPENFOAMMD5SUMSFILE[1]}"
  fi

  if [ "x$THIRDPARTY_BIN_CMAKE" != "x" ]; then
    do_wget_md5sum "$OPENFOAM_SOURCEFORGE" "$THIRDPARTY_BIN_CMAKE" "$SOURCEFORGE_URL_OPTIONS" "${OPENFOAMMD5SUMSFILE[1]}"
  fi

  if [ "x$BUILD_QT" == "xon" ]; then
    do_wget "$QT_BASEURL" "$QT_PACKAGEFILE"
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    do_wget "$CCMIO_BASEURL" "$CCMIO_PACKAGE" " " "$CCMIO_BASEURL_EXTRA_PRE"
  fi

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    #get paraview 3.8 from kitware, which has native openfoam reader
    do_wget "$KV_PV_BASEURL" "$KV_PV_FILE"
  fi
}

#Unpack downloaded files
function unpack_downloaded_files()
{
  cd_openfoam #this is a precautionary measure

  echo "------------------------------------------------------"
  echo "Untar files -- This can take time"
  if [ "x$INSTALLMODE" != "xcustom" ]; then
    echo "Untaring $THIRDPARTY_GENERAL"
    #TODO: option "-n" in "pv" will allow the usage of "dialog --gauge" :)
    pv $THIRDPARTY_GENERAL | tar -xz
  fi

  #check if $THIRDPARTY_BIN is provided, because one could want to build from sources
  #TODO: in custom mode, it doesn't unpack because the only situation where it could be necessary is if
  #      the pre-built ParaView is required back again... and such option doesn't explicitly exist.
  if [ "x$THIRDPARTY_BIN" != "x" -a "x$INSTALLMODE" != "xcustom" ]; then
    cd_openfoam
    echo "Untaring $THIRDPARTY_BIN"
    pv $THIRDPARTY_BIN | tar -xz
  fi

  #needed for Ubuntu 8.04 and 10.04 x86_64
  if [ "x$THIRDPARTY_BIN_CMAKE" != "x" ]; then
    cd_openfoam
    echo "Untaring $THIRDPARTY_BIN_CMAKE"
    pv $THIRDPARTY_BIN_CMAKE | tar -xz ThirdParty-1.6/cmake-2.6.4
    cd ThirdParty-1.6/cmake-2.6.4/platforms/
    #this is necessary, since there isn't a pre-build made for 64bit
    ln -s linux linux64
  fi

  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    cd_openfoam
    echo "Untaring $KV_PV_FILE"
    pv $KV_PV_FILE | tar -xz
    #put ParaView in 3rd Party directory
    mv "$KV_PV_DIR" "ThirdParty-1.6/$KV_PV_DIR"
  fi

  if [ "x$BUILD_QT" == "xon" ]; then
    cd_openfoam
    cd ThirdParty-1.6
    echo "Untaring $QT_PACKAGEFILE"
    pv ../$QT_PACKAGEFILE | tar xj
  fi

  if [ "x$BUILD_CCM26TOFOAM" == "xon" ]; then
    cd_openfoam
    cd ThirdParty-1.6
    ln -s ../$CCMIO_PACKAGE $CCMIO_PACKAGE
    #NOTE: unpacking will be done by the AllwmakeLibccmio script
    if [ -e "${CCMIO_MAKEFILES_FILES[1]}" -a -e "${CCMIO_MAKEFILES_OPTIONS[1]}" ]; then
      if [ ! -d "wmakeFiles/libccmio/Make" ]; then
        mkdir -p wmakeFiles/libccmio/Make
      fi
      cp "${CCMIO_MAKEFILES_FILES[1]}" wmakeFiles/libccmio/Make/files
      cp "${CCMIO_MAKEFILES_OPTIONS[1]}" wmakeFiles/libccmio/Make/options
    fi
  fi

  #copy modified makeGcc to here
  if [ "x${GCCMODED_MAKESCRIPT[0]}" != "x" ]; then
    cd_openfoam
    cd ThirdParty-1.6
    cp ${GCCMODED_MAKESCRIPT[1]} .
    chmod +x ${GCCMODED_MAKESCRIPT[0]}
  fi
  echo "------------------------------------------------------"
}

function process_online_log_of_timings()
{
  #TODO: this value is hard coded for now, since it should come from the output of our timings script
  #The total count of "make[.]" found in our build_Qt.log
  BUILD_QT_LAST_BUILD_COUNT=293

  #TODO: this value is hard coded for now, since it should come from the output of our timings script
  #The total count of "make[.]" found in our build_gcc.log
  BUILD_GCC_LAST_BUILD_COUNT=556

  #NOTES: ParaView has its own percentage, so we just lift from it
  #NOTES: OpenFOAM uses wmake, making it relatively easier to estimate automatically,
  #thus automatically adapting to new additions in the git repository
}

#git clone OpenFOAM
function OpenFOAM_git_clone()
{
  cd_openfoam #this is a precautionary measure

  echo "------------------------------------------------------"
  echo "Retrieving OpenFOAM 1.6.x from git..."
  echo "------------------------------------------------------"
  #redo the link if necessary
  if [ -L "$PATHOF/ThirdParty-1.6.x" ]; then
    unlink "$PATHOF/ThirdParty-1.6.x"
  fi
  ln -s "$PATHOF/ThirdParty-1.6" "$PATHOF/ThirdParty-1.6.x"
  git clone http://repo.or.cz/r/OpenFOAM-1.6.x.git
  OpenFOAM_git_error=$?

  continue_after_failed_openfoam_git
}


function link_gcc433_libraries_to_system()
{
  #Define which folder to fix libraries
  if [ "$SYSTEM_VERSION" != "8.04" ]; then
    if [ "$arch" == "x64" ]; then
      LIBRARY_PATH_TO_FIX=${PATHOF}/ThirdParty-1.6/gcc-4.3.3/platforms/linux64/lib64
    elif [ "$arch" == "x86" ]; then
      LIBRARY_PATH_TO_FIX=${PATHOF}/ThirdParty-1.6/gcc-4.3.3/platforms/linux/lib
    fi
  fi

  echo "-----------------------------------------------------"
  echo "Fixing library links"
  cd $LIBRARY_PATH_TO_FIX
  mv libstdc++.so.6 libstdc++.so.6.orig
  ln -s `locate libstdc++.so.6.0 | grep "^/usr/lib" | head -n 1` libstdc++.so.6
  mv libgcc_s.so.1 libgcc_s.so.1.orig
  ln -s `locate libgcc_s.so. | grep "^/lib" | head -n 1` libgcc_s.so.1
  echo "Fix up done"
  echo "------------------------------------------------------"
}


#apply patches and fixes
function apply_patches_fixes()
{
  cd_openfoam #this is a precautionary measure

  #FIXES ------

  #fix links to proper libraries for gcc, as long as the OpenFOAM's precompiled version is used
  if isleftlarger_or_equal $SYSTEM_VERSION 9.10 && [ "x$USE_OF_GCC" == "xon" ]; then
    link_gcc433_libraries_to_system
  fi

  #fix ParaView's help file reference, for when ParaView isn't built
  if [ "x$BUILD_PARAVIEW" == "xoff" ]; then
    cd_openfoam
    if [ "$arch" == "x86" ]; then
      cd ThirdParty-1.6/paraview-3.6.1/platforms/linuxGcc/bin
    elif [ "$arch" == "x64" ]; then
      cd ThirdParty-1.6/paraview-3.6.1/platforms/linux64Gcc/bin
    fi
    mv pqClientDocFinder.txt pqClientDocFinder_orig.txt
    cat pqClientDocFinder_orig.txt | sed -e 's=/home/dm2/henry/OpenFOAM='${PATHOF}'=' > ./pqClientDocFinder.txt
  fi

  cd_openfoam #this is a precautionary measure

  #PATCHES ----
  #Apply patches from defined functions
  echo "------------------------------------------------------"
  echo "Applying patches to bashrc and settings.sh ..."
  echo "------------------------------------------------------"
  if [ "x$HOME/OpenFOAM" != "x$PATHOF" ]; then #fix OpenFOAM base path in bashrc
    patchBashrcPath
  fi
  patchBashrcMultiCore #for faster builds on multi-core machines
  #proper fix for running in 32bit
  if [ "$arch" == "x86" ]; then
    patchBashrcTo32
  fi
  #Fix for using the system's compiler
  if [ "x$USE_OF_GCC" == "xoff" ]; then
    patchSettingsToSystemCompiler
  fi #for using the system's compiler

  #apply patch for paraFoam, for when the running language
  #isn't the standard english!
  if ! issystem_english; then
    patchParaFoamScript
  fi

  #apply patches for wmake script, MPFR library, makeQt script, makeParaView script and libccmio
  patchWmakeForTimings
  patchMPFRMissingFiles
  patchMakeQtScript
  patchMakeParaViewScript
  patchAllwmakeLibccmioScript

  if [ "x$USE_REPO_PV" == "xon" -o "x$USE_KITWARE_PV" == "xon" ]; then
    #First copy paraFoamSys to OpenFOAM's bin folder
    cd_openfoam
    cp "${PFOAM_PATCHFILE[1]}" OpenFOAM-1.6.x/bin/
    chmod +x OpenFOAM-1.6.x/bin/${PFOAM_PATCHFILE[0]}

    #Now patch it up
    patchParaFoamSys
  fi
}

#Activate OpenFOAM environment
function setOpenFOAMEnv()
{
  cd_openfoam
  echo "------------------------------------------------------"
  echo "Activate OpenFOAM environment"
  echo "------------------------------------------------------"
  cd OpenFOAM-1.6.x/
  . $PATHOF/OpenFOAM-1.6.x/etc/bashrc
}

#Add OpenFOAM's bashrc entry in $PATHOF/.bashrc
function add_openfoam_to_bashrc()
{
  echo "------------------------------------------------------"
  echo "Add OpenFOAM's bashrc entry in $PATHOF/.bashrc"
  echo "------------------------------------------------------"

  #nuke ~/.bashrc entries that have references to the same script
  cat ~/.bashrc | grep -v "$PATHOF/OpenFOAM-1.6.x/etc/bashrc" > ~/.bashrc.new
  cp ~/.bashrc ~/.bashrc.old
  mv ~/.bashrc.new ~/.bashrc
  if [ "x$USE_ALIAS_FOR_BASHRC" == "xon" ]; then
    echo -e "alias startFoam=\". $PATHOF/OpenFOAM-1.6.x/etc/bashrc\"" >> ~/.bashrc
  else
    echo ". $PATHOF/OpenFOAM-1.6.x/etc/bashrc" >> ~/.bashrc
  fi
}

