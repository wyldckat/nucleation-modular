#!/bin/bash

#-- PATCHING FUNCTIONS ------------------------------------------------------
#list of functions herein:

#global variables used by this script:
#   INST_SYSTEM - System variant for installation - defined in the master script
#   SCRIPT_WORKFOLDER - the folder where the main script's dependency files are located
#   OF_SHORT_VERSION - the short version of OpenFOAM to be installed. Example: 16x
#   OF_LONG_VERSION - the long version of OpenFOAM to be installed. Example: 1.6.x

#Code -----------------------------------------
echo "Sourcing patching functions for OpenFOAM ${OF_LONG_VERSION}..."

#source system related script
if [ "x$INST_SYSTEM" != "x" -a "x$OF_SHORT_VERSION" != "x" ]; then
  . ${SCRIPT_WORKFOLDER}/${OF_MODULE_NAME}/${INST_SYSTEM}/patches
else
  echo "The variable INST_SYSTEM and/or OF_SHORT_VERSION is/are empty and both are crucial to exist! Aborting execution."
  exit 1
fi


#-- FUNCTIONS -----------------------------------------------------

#apply patches and fixes
#NOTE: This function must always exist!
function apply_patches()
{
  cd_openfoam #this is a precautionary measure

  #PATCHES ----
  #Apply patches from defined functions
  echo "------------------------------------------------------"
  echo "Applying patches to bashrc and settings.sh ..."
  echo "------------------------------------------------------"
  if [ "x$HOME/OpenFOAM" != "x$PATHOF" ]; then #fix OpenFOAM base path in bashrc
    patchBashrcPath
  fi
  patchBashrcMultiCore #for faster builds on multi-core machines
  #proper fix for running in 32bit
  if [ "$arch" == "x86" ]; then
    patchBashrcTo32
  fi

  #Fix for using the system's compiler
  if [ "x$USE_OF_GCC" == "xoff" ]; then
    patchSettingsToSystemCompiler
  fi #for using the system's compiler

  #patch the bashrc file for using the system's OpenMPI
  if [ "x$USE_SYSTEM_OPENMPI" == "xon" ]; then
    patchBashrcToSystemOpenMPI
  fi

  #apply patch for paraFoam, for when the running language
  #isn't the standard english!
  if ! issystem_english; then
    patchParaFoamScript
  fi

  #apply patches for wmake script, MPFR library, makeQt script, makeParaView script and libccmio
  patchWmakeForTimings
  patchMPFRMissingFiles
  patchMakeQtScript
  patchMakeParaViewScript
  patchAllwmakeLibccmioScript

  if [ "x$USE_REPO_PV" == "xon" -o "x$USE_KITWARE_PV" == "xon" ]; then
    #First copy paraFoamSys to OpenFOAM's bin folder
    cd_openfoam
    cp "${PFOAM_PATCHFILE[1]}" OpenFOAM-${OF_LONG_VERSION}/bin/
    chmod +x OpenFOAM-${OF_LONG_VERSION}/bin/${PFOAM_PATCHFILE[0]}

    #Now patch it up
    patchParaFoamSys
  fi

  #apply patches associated with the system itself
  apply_patches_system
}


#patch bashrc path so it will reflect the chosen $PATHOF
function patchBashrcPath()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- ../bashrc 2010-05-02 13:08:09.905803554 +0200
+++ bashrc  2010-05-02 13:18:36.991912551 +0200
@@ -43,7 +43,8 @@
 #
 # Location of FOAM installation
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-foamInstall=$HOME/$WM_PROJECT
+foamInstall='$PATHOF'
+# foamInstall=$HOME/$WM_PROJECT
 # foamInstall=~$WM_PROJECT
 # foamInstall=/usr/local/$WM_PROJECT
 # foamInstall=/opt/$WM_PROJECT
@@ -68,7 +69,7 @@
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
 export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
-export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$FOAM_INST_DIR/$USER-$WM_PROJECT_VERSION


 # Location of third-party software' | patch -p0

cd $tmpVar
unset tmpVar
}

#Patch to compile using multicore
function patchBashrcMultiCore()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- ../../bashrc  2009-11-21 00:00:47.502453988 +0000
+++ bashrc  2009-11-21 00:01:20.814519578 +0000
@@ -105,6 +105,20 @@
 : ${WM_MPLIB:=OPENMPI}; export WM_MPLIB


+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+export WM_NCOMPPROCS
+
 # Run options (floating-point signal handling and memory initialisation)
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 export FOAM_SIGFPE=' | patch -p0

cd $tmpVar
unset tmpVar
}

#Patch to work on 32-bit versions
function patchBashrcTo32()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- ../../bashrc  2009-11-21 00:00:47.502453988 +0000
+++ bashrc  2009-11-21 00:01:20.814519578 +0000
@@ -93,7 +93,7 @@
 # Compilation options (architecture, precision, optimised, debug or profiling)
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 # WM_ARCH_OPTION = 32 | 64
-: ${WM_ARCH_OPTION:=64}; export WM_ARCH_OPTION
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION

 # WM_PRECISION_OPTION = DP | SP
 : ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION' | patch -p0

cd $tmpVar
unset tmpVar
}

#patch the bashrc file for using the system's OpenMPI
function patchBashrcToSystemOpenMPI()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- bashrc.orig 2010-08-31 18:09:24.000000000 +0100
+++ bashrc  2010-08-31 18:10:13.000000000 +0100
@@ -102,7 +102,7 @@
 : ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION

 # WM_MPLIB = | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI
-: ${WM_MPLIB:=OPENMPI}; export WM_MPLIB
+: ${WM_MPLIB:=SYSTEMOPENMPI}; export WM_MPLIB


 # Run options (floating-point signal handling and memory initialisation)
' | patch -p0

cd $tmpVar
unset tmpVar
}

#Patch to use System compiler
function patchSettingsToSystemCompiler()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/etc/

echo '--- ../../settings.sh 2009-11-21 00:01:29.851902621 +0000
+++ settings.sh 2009-11-21 00:01:59.157391716 +0000
@@ -95,7 +95,7 @@
 # Select compiler installation
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 # compilerInstall = OpenFOAM | System
-compilerInstall=OpenFOAM
+compilerInstall=System

 case "${compilerInstall:-OpenFOAM}" in
 OpenFOAM)
@@ -129,6 +132,8 @@
     compilerBin=$WM_COMPILER_DIR/bin
     compilerLib=$WM_COMPILER_DIR/lib$WM_COMPILER_LIB_ARCH:$WM_COMPILER_DIR/lib
     ;;
+System)
+    export WM_COMPILER_DIR=/usr
 esac

 if [ -d "$compilerBin" ]' | patch -p0

cd $tmpVar
unset tmpVar
}

#Patch paraFoam script
function patchParaFoamScript()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/bin/

echo '--- ../../paraFoam  2010-04-11 01:38:34.000000000 +0100
+++ paraFoam  2010-04-11 01:38:18.000000000 +0100
@@ -75,6 +75,8 @@
     esac
 done

+export LC_ALL=C
+
 # get a sensible caseName
 caseName=${PWD##*/}
 caseFile="$caseName.OpenFOAM"
' | patch -p0

cd $tmpVar
unset tmpVar
}


#Patch AllwmakeLibccmio script
#Code source for patch: http://www.cfd-online.com/Forums/openfoam-bugs/62300-of15-libccmio-thus-ccm26tofoam-do-not-compile-2.html
function patchAllwmakeLibccmioScript()
{
tmpVar=$PWD
cd_thirdparty

echo '--- ../AllwmakeLibccmio  2009-07-24 13:51:14.000000000 +0100
+++ AllwmakeLibccmio 2009-10-17 11:29:36.000000000 +0100
@@ -33,6 +33,7 @@
 set -x

 packageDir=libccmio-2.6.1
+origDir=$PWD

 if [ ! -d ${packageDir} ]
 then
@@ -52,7 +53,17 @@

 if [ -d ${packageDir} -a ! -d ${packageDir}/Make ]
 then
-   cp -r wmakeFiles/libccmio/Make ${packageDir}/Make
+  if [ ! -d "wmakeFiles/libccmio/Make" ]; then
+    mkdir -p ${packageDir}/Make
+    cd ${packageDir}/Make
+    wget http://www.cfd-online.com/OpenFOAM_Discus/messages/126/files-8822.unk
+    wget http://www.cfd-online.com/OpenFOAM_Discus/messages/126/options-8823.unk
+    mv -i files-8822.unk files
+    mv -i options-8823.unk options
+    cd $origDir
+  else
+    cp -r wmakeFiles/libccmio/Make ${packageDir}/Make
+  fi
 fi

 if [ -d ${packageDir}/Make ]' | patch -p0
cd $tmpVar
unset tmpVar
}

#Patch the missing files in MPFR that comes with the ThirdParty.General package
function patchMPFRMissingFiles()
{
tmpVar=$PWD
cd_thirdparty

if [ -e "${MPFRPATCHFILE[1]}" ]; then
  patch -p1 < ${MPFRPATCHFILE[1]}
fi

cd $tmpVar
unset tmpVar
}

#patch makeParaView script to allow -noqt option
function patchMakeParaViewScript()
{
tmpVar=$PWD
cd_thirdparty

echo '--- ../makeParaView  2010-04-18 21:49:00.611392700 +0100
+++ ./makeParaView  2010-04-18 21:50:31.609831213 +0100
@@ -45,13 +45,13 @@
 # note: script will try to determine the appropriate python library.
 #       If it fails, specify the path using the PYTHON_LIBRARY variable
 withPYTHON=false
-PYTHON_LIBRARY=""
+PYTHON_LIBRARY="/usr/lib/libpython2.6.so"
 # PYTHON_LIBRARY="/usr/lib64/libpython2.6.so.1.0"

 # MESA graphics support:
 withMESA=false
 MESA_INCLUDE="/usr/include/GL"
-MESA_LIBRARY="/usr/lib64/libOSMesa.so"
+MESA_LIBRARY="/usr/lib/libOSMesa.so"

 # extra QT gui support (useful for re-using the installation for engrid)
 withQTSUPPORT=true
@@ -75,6 +75,7 @@
   -python       with python (if not already enabled)
   -mesa         with mesa (if not already enabled)
   -qt           with extra Qt gui support (if not already enabled)
+  -noqt         without extra Qt gui support (if not already disabled)
   -verbose      verbose output in Makefiles
   -version VER  specify an alternative version (default: $ParaView_VERSION)
   -help
@@ -104,6 +105,7 @@
 case "$Script" in *-python*) withPYTHON=true;; esac
 case "$Script" in *-mesa*)   withMESA=true;; esac
 case "$Script" in *-qt*)     withQTSUPPORT=true;; esac
+case "$Script" in *-noqt*)     withQTSUPPORT=false;; esac

 #
 # various building stages
@@ -181,6 +183,10 @@
         withQTSUPPORT=true
         shift
         ;;
+    -noqt)
+        withQTSUPPORT=false
+        shift
+        ;;
     -qmake)
         [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
         export QMAKE_PATH=$2
--- ../makeParaViewFunctions     2009-07-24 13:51:14.000000000 +0100
+++ ./tools/makeParaViewFunctions       2010-05-15 18:39:33.000000000 +0100
@@ -167,7 +167,7 @@

 addQtSupport()
 {
-    [ "${withQTSUPPORT:=false}" = true ] || return
+  if [ "${withQTSUPPORT:=false}" = true ]; then

     addCMakeVariable "PARAVIEW_BUILD_QT_GUI=ON"

@@ -209,6 +209,11 @@
         echo "*** Error: cannot find qmake either at \$QMAKE_PATH or in current \$PATH"
         exit 1
     fi
+  else
+    addCMakeVariable "PARAVIEW_BUILD_QT_GUI=OFF"
+    addCMakeVariable "PointSpritePlugin_BUILD_EXAMPLES=OFF"
+    addCMakeVariable "PARAVIEW_BUILD_PLUGIN_PointSprite=OFF"
+  fi
 }

' | patch -p0
cd $tmpVar
unset tmpVar
}

#patch makeQt script to allow one more option for building Qt
function patchMakeQtScript()
{
tmpVar=$PWD
cd_thirdparty

echo '--- ../makeQt 2010-04-26 23:10:03.000000000 +0100
+++ makeQt  2010-04-26 23:11:10.000000000 +0100
@@ -45,7 +45,7 @@
     ./configure \
         --prefix=${QT_ARCH_PATH} \
         -nomake demos \
-        -nomake examples
+        -nomake examples $1

     if [ -r /proc/cpuinfo ]
     then' | patch -p0

cd $tmpVar
unset tmpVar
}

#Patch wmake to provide timings upon request via WM_DO_TIMINGS
function patchWmakeForTimings()
{
tmpVar=$PWD
cd_openfoam
cd OpenFOAM-${OF_LONG_VERSION}/wmake/

patch -p0 < "${WMAKEPATCHFILE[1]}"

cd $tmpVar
unset tmpVar
}

#Patch paraFoamSys
function patchParaFoamSys()
{
  tmpVar=$PWD
  cd_openfoam
  cd OpenFOAM-${OF_LONG_VERSION}/bin/

  #add kitware paraview to path
  if [ "x$USE_KITWARE_PV" == "xon" ]; then
echo '--- orig/'${PFOAM_PATCHFILE[0]}'  2010-08-28 11:35:05.000000000 +0100
+++ ./'${PFOAM_PATCHFILE[0]}' 2010-08-29 13:10:41.000000000 +0100
@@ -33,6 +33,8 @@
 #------------------------------------------------------------------------------
 Script=${0##*/}

+export PATH='$PATHOF'/ThirdParty-1.6/'$KV_PV_DIR'/bin:$PATH
+
 usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE
' | patch -p0
  fi

  #check paraview version
  #PV writes version string to stderr...
  if [ "x$USE_KITWARE_PV" == "xon" ]; then
    cd $PATHOF/ThirdParty-1.6/$KV_PV_DIR/bin
    ./paraview -V 2> $PATHOF/OpenFOAM-${OF_LONG_VERSION}/bin/pv.log
    cd_openfoam
    cd OpenFOAM-${OF_LONG_VERSION}/bin/
  else
    paraview -V 2> pv.log
  fi

  Paraview_VERSION="$(cat pv.log | awk -F'View' '{print $2}')"
  rm pv.log
  #include version variable in .bashrc so we can use this in paraFoamSys
  if [ "x$Paraview_VERSION" == "x" ]; then
      echo "Paraview version could not be determined!"
  else

echo '--- orig/'${PFOAM_PATCHFILE[0]}'  2010-08-28 11:35:05.000000000 +0100
+++ ./'${PFOAM_PATCHFILE[0]}' 2010-08-29 13:10:41.000000000 +0100
@@ -56,6 +58,9 @@
    PRECISION="$(cat system/controlDict | grep '"'"'timePrecision'"'"' | awk '"'"'{print $2}'"'"')"
 }

+#injected here by the installer
+export Paraview_VERSION='$Paraview_VERSION'
+
 # get a sensible caseName
 caseName=${PWD##*/}

' | patch -p0

  fi

  cd $tmpVar
  unset tmpVar
}
