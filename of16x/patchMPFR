--- ThirdParty-1.6-orig/mpfr-2.4.1/log2.c	1970-01-01 01:00:00.000000000 +0100
+++ ThirdParty-1.6/mpfr-2.4.1/log2.c	2009-10-16 22:44:48.000000000 +0100
@@ -0,0 +1,136 @@
+/* mpfr_log2 -- log base 2
+
+Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
+Contributed by the Arenaire and Cacao projects, INRIA.
+
+This file is part of the GNU MPFR Library.
+
+The GNU MPFR Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MPFR Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MPFR Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+MA 02110-1301, USA. */
+
+#define MPFR_NEED_LONGLONG_H
+#include "mpfr-impl.h"
+
+ /* The computation of r=log2(a)
+      r=log2(a)=log(a)/log(2)      */
+
+int
+mpfr_log2 (mpfr_ptr r, mpfr_srcptr a, mp_rnd_t rnd_mode)
+{
+  int inexact;
+  MPFR_SAVE_EXPO_DECL (expo);
+
+  if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (a)))
+    {
+      /* If a is NaN, the result is NaN */
+      if (MPFR_IS_NAN (a))
+        {
+          MPFR_SET_NAN (r);
+          MPFR_RET_NAN;
+        }
+      /* check for infinity before zero */
+      else if (MPFR_IS_INF (a))
+        {
+          if (MPFR_IS_NEG (a))
+            /* log(-Inf) = NaN */
+            {
+              MPFR_SET_NAN (r);
+              MPFR_RET_NAN;
+            }
+          else /* log(+Inf) = +Inf */
+            {
+              MPFR_SET_INF (r);
+              MPFR_SET_POS (r);
+              MPFR_RET (0);
+            }
+        }
+      else /* a is zero */
+        {
+          MPFR_ASSERTD (MPFR_IS_ZERO (a));
+          MPFR_SET_INF (r);
+          MPFR_SET_NEG (r);
+          MPFR_RET (0); /* log2(0) is an exact -infinity */
+        }
+    }
+
+  /* If a is negative, the result is NaN */
+  if (MPFR_UNLIKELY (MPFR_IS_NEG (a)))
+    {
+      MPFR_SET_NAN (r);
+      MPFR_RET_NAN;
+    }
+
+  /* If a is 1, the result is 0 */
+  if (MPFR_UNLIKELY (mpfr_cmp_ui (a, 1) == 0))
+    {
+      MPFR_SET_ZERO (r);
+      MPFR_SET_POS (r);
+      MPFR_RET (0); /* only "normal" case where the result is exact */
+    }
+
+  /* If a is 2^N, log2(a) is exact*/
+  if (MPFR_UNLIKELY (mpfr_cmp_ui_2exp (a, 1, MPFR_GET_EXP (a) - 1) == 0))
+    return mpfr_set_si(r, MPFR_GET_EXP (a) - 1, rnd_mode);
+
+  MPFR_SAVE_EXPO_MARK (expo);
+
+  /* General case */
+  {
+    /* Declaration of the intermediary variable */
+    mpfr_t t, tt;
+    /* Declaration of the size variable */
+    mp_prec_t Ny = MPFR_PREC(r);              /* target precision */
+    mp_prec_t Nt;                             /* working precision */
+    mp_exp_t err;                             /* error */
+    MPFR_ZIV_DECL (loop);
+
+    /* compute the precision of intermediary variable */
+    /* the optimal number of bits : see algorithms.tex */
+    Nt = Ny + 3 + MPFR_INT_CEIL_LOG2 (Ny);
+
+    /* initialise of intermediary       variable */
+    mpfr_init2 (t, Nt);
+    mpfr_init2 (tt, Nt);
+
+    /* First computation of log2 */
+    MPFR_ZIV_INIT (loop, Nt);
+    for (;;)
+      {
+        /* compute log2 */
+        mpfr_const_log2(t,GMP_RNDD); /* log(2) */
+        mpfr_log(tt,a,GMP_RNDN);     /* log(a) */
+        mpfr_div(t,tt,t,GMP_RNDN); /* log(a)/log(2) */
+
+        /* estimation of the error */
+        err = Nt-3;
+        if (MPFR_LIKELY (MPFR_CAN_ROUND (t, err, Ny, rnd_mode)))
+          break;
+
+        /* actualisation of the precision */
+        MPFR_ZIV_NEXT (loop, Nt);
+        mpfr_set_prec (t, Nt);
+        mpfr_set_prec (tt, Nt);
+      }
+    MPFR_ZIV_FREE (loop);
+
+    inexact = mpfr_set (r, t, rnd_mode);
+
+    mpfr_clear (t);
+    mpfr_clear (tt);
+  }
+
+  MPFR_SAVE_EXPO_FREE (expo);
+  return mpfr_check_range (r, inexact, rnd_mode);
+}
--- ThirdParty-1.6-orig/mpfr-2.4.1/log1p.c	1970-01-01 01:00:00.000000000 +0100
+++ ThirdParty-1.6/mpfr-2.4.1/log1p.c	2009-10-16 22:44:48.000000000 +0100
@@ -0,0 +1,152 @@
+/* mpfr_log1p -- Compute log(1+x)
+
+Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
+Contributed by the Arenaire and Cacao projects, INRIA.
+
+This file is part of the GNU MPFR Library.
+
+The GNU MPFR Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MPFR Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MPFR Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+MA 02110-1301, USA. */
+
+#define MPFR_NEED_LONGLONG_H
+#include "mpfr-impl.h"
+
+ /* The computation of log1p is done by
+    log1p(x)=log(1+x)                      */
+
+int
+mpfr_log1p (mpfr_ptr y, mpfr_srcptr x, mp_rnd_t rnd_mode)
+{
+  int comp, inexact;
+  mp_exp_t ex;
+  MPFR_SAVE_EXPO_DECL (expo);
+
+  if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (x)))
+    {
+      if (MPFR_IS_NAN (x))
+        {
+          MPFR_SET_NAN (y);
+          MPFR_RET_NAN;
+        }
+      /* check for inf or -inf (result is not defined) */
+      else if (MPFR_IS_INF (x))
+        {
+          if (MPFR_IS_POS (x))
+            {
+              MPFR_SET_INF (y);
+              MPFR_SET_POS (y);
+              MPFR_RET (0);
+            }
+          else
+            {
+              MPFR_SET_NAN (y);
+              MPFR_RET_NAN;
+            }
+        }
+      else /* x is zero */
+        {
+          MPFR_ASSERTD (MPFR_IS_ZERO (x));
+          MPFR_SET_ZERO (y);   /* log1p(+/- 0) = +/- 0 */
+          MPFR_SET_SAME_SIGN (y, x);
+          MPFR_RET (0);
+        }
+    }
+
+  ex = MPFR_GET_EXP (x);
+  if (ex < 0)  /* -0.5 < x < 0.5 */
+    {
+      /* For x > 0,    abs(log(1+x)-x) < x^2/2.
+         For x > -0.5, abs(log(1+x)-x) < x^2. */
+      if (MPFR_IS_POS (x))
+        MPFR_FAST_COMPUTE_IF_SMALL_INPUT (y, x, - ex - 1, 0, 0, rnd_mode, {});
+      else
+        MPFR_FAST_COMPUTE_IF_SMALL_INPUT (y, x, - ex, 0, 1, rnd_mode, {});
+    }
+
+  comp = mpfr_cmp_si (x, -1);
+  /* log1p(x) is undefined for x < -1 */
+  if (MPFR_UNLIKELY(comp <= 0))
+    {
+      if (comp == 0)
+        /* x=0: log1p(-1)=-inf (division by zero) */
+        {
+          MPFR_SET_INF (y);
+          MPFR_SET_NEG (y);
+          MPFR_RET (0);
+        }
+      MPFR_SET_NAN (y);
+      MPFR_RET_NAN;
+    }
+
+  MPFR_SAVE_EXPO_MARK (expo);
+
+  /* General case */
+  {
+    /* Declaration of the intermediary variable */
+    mpfr_t t;
+    /* Declaration of the size variable */
+    mp_prec_t Ny = MPFR_PREC(y);             /* target precision */
+    mp_prec_t Nt;                            /* working precision */
+    mp_exp_t err;                            /* error */
+    MPFR_ZIV_DECL (loop);
+
+    /* compute the precision of intermediary variable */
+    /* the optimal number of bits : see algorithms.tex */
+    Nt = Ny + MPFR_INT_CEIL_LOG2 (Ny) + 6;
+
+    /* if |x| is smaller than 2^(-e), we will loose about e bits
+       in log(1+x) */
+    if (MPFR_EXP(x) < 0)
+      Nt += -MPFR_EXP(x);
+
+    /* initialise of intermediary variable */
+    mpfr_init2 (t, Nt);
+
+    /* First computation of log1p */
+    MPFR_ZIV_INIT (loop, Nt);
+    for (;;)
+      {
+        /* compute log1p */
+        inexact = mpfr_add_ui (t, x, 1, GMP_RNDN);      /* 1+x */
+        /* if inexact = 0, then t = x+1, and the result is simply log(t) */
+        if (inexact == 0)
+          {
+            inexact = mpfr_log (y, t, rnd_mode);
+            goto end;
+          }
+        mpfr_log (t, t, GMP_RNDN);        /* log(1+x) */
+
+        /* the error is bounded by (1/2+2^(1-EXP(t))*ulp(t) (cf algorithms.tex)
+           if EXP(t)>=2, then error <= ulp(t)
+           if EXP(t)<=1, then error <= 2^(2-EXP(t))*ulp(t) */
+        err = Nt - MAX (0, 2 - MPFR_GET_EXP (t));
+
+        if (MPFR_LIKELY (MPFR_CAN_ROUND (t, err, Ny, rnd_mode)))
+          break;
+
+        /* increase the precision */
+        MPFR_ZIV_NEXT (loop, Nt);
+        mpfr_set_prec (t, Nt);
+      }
+    inexact = mpfr_set (y, t, rnd_mode);
+
+  end:
+    MPFR_ZIV_FREE (loop);
+    mpfr_clear (t);
+  }
+
+  MPFR_SAVE_EXPO_FREE (expo);
+  return mpfr_check_range (y, inexact, rnd_mode);
+}
--- ThirdParty-1.6-orig/mpfr-2.4.1/log10.c	1970-01-01 01:00:00.000000000 +0100
+++ ThirdParty-1.6/mpfr-2.4.1/log10.c	2009-10-16 22:44:48.000000000 +0100
@@ -0,0 +1,144 @@
+/* mpfr_log10 -- logarithm in base 10.
+
+Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
+Contributed by the Arenaire and Cacao projects, INRIA.
+
+This file is part of the GNU MPFR Library.
+
+The GNU MPFR Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 2.1 of the License, or (at your
+option) any later version.
+
+The GNU MPFR Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MPFR Library; see the file COPYING.LIB.  If not, write to
+the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+MA 02110-1301, USA. */
+
+#define MPFR_NEED_LONGLONG_H
+#include "mpfr-impl.h"
+
+ /* The computation of r=log10(a)
+
+    r=log10(a)=log(a)/log(10)
+ */
+
+int
+mpfr_log10 (mpfr_ptr r, mpfr_srcptr a, mp_rnd_t rnd_mode)
+{
+  int inexact;
+  MPFR_SAVE_EXPO_DECL (expo);
+
+  /* If a is NaN, the result is NaN */
+  if (MPFR_UNLIKELY (MPFR_IS_SINGULAR (a)))
+    {
+      if (MPFR_IS_NAN (a))
+        {
+          MPFR_SET_NAN (r);
+          MPFR_RET_NAN;
+        }
+      /* check for infinity before zero */
+      else if (MPFR_IS_INF (a))
+        {
+          if (MPFR_IS_NEG (a))
+            /* log10(-Inf) = NaN */
+            {
+              MPFR_SET_NAN (r);
+              MPFR_RET_NAN;
+            }
+          else /* log10(+Inf) = +Inf */
+            {
+              MPFR_SET_INF (r);
+              MPFR_SET_POS (r);
+              MPFR_RET (0); /* exact */
+            }
+        }
+      else /* a = 0 */
+        {
+          MPFR_ASSERTD (MPFR_IS_ZERO (a));
+          MPFR_SET_INF (r);
+          MPFR_SET_NEG (r);
+          MPFR_RET (0); /* log10(0) is an exact -infinity */
+        }
+    }
+
+  /* If a is negative, the result is NaN */
+  if (MPFR_UNLIKELY (MPFR_IS_NEG (a)))
+    {
+      MPFR_SET_NAN (r);
+      MPFR_RET_NAN;
+    }
+
+  /* If a is 1, the result is 0 */
+  if (mpfr_cmp_ui (a, 1) == 0)
+    {
+      MPFR_SET_ZERO (r);
+      MPFR_SET_POS (r);
+      MPFR_RET (0); /* result is exact */
+    }
+
+  MPFR_SAVE_EXPO_MARK (expo);
+
+  /* General case */
+  {
+    /* Declaration of the intermediary variable */
+    mpfr_t t, tt;
+    MPFR_ZIV_DECL (loop);
+    /* Declaration of the size variable */
+    mp_prec_t Ny = MPFR_PREC(r);   /* Precision of output variable */
+    mp_prec_t Nt;        /* Precision of the intermediary variable */
+    mp_exp_t  err;                           /* Precision of error */
+
+    /* compute the precision of intermediary variable */
+    /* the optimal number of bits : see algorithms.tex */
+    Nt = Ny + 4 + MPFR_INT_CEIL_LOG2 (Ny);
+
+    /* initialise of intermediary variables */
+    mpfr_init2 (t, Nt);
+    mpfr_init2 (tt, Nt);
+
+    /* First computation of log10 */
+    MPFR_ZIV_INIT (loop, Nt);
+    for (;;)
+      {
+        /* compute log10 */
+        mpfr_set_ui (t, 10, GMP_RNDN);   /* 10 */
+        mpfr_log (t, t, GMP_RNDD);       /* log(10) */
+        mpfr_log (tt, a, GMP_RNDN);      /* log(a) */
+        mpfr_div (t, tt, t, GMP_RNDN);   /* log(a)/log(10) */
+
+        /* estimation of the error */
+        err = Nt - 4;
+        if (MPFR_LIKELY (MPFR_CAN_ROUND (t, err, Ny, rnd_mode)))
+          break;
+
+        /* log10(10^n) is exact:
+           FIXME: Can we have 10^n exactly representable as a mpfr_t
+           but n can't fit an unsigned long? */
+        if (MPFR_IS_POS (t)
+            && mpfr_integer_p (t) && mpfr_fits_ulong_p (t, GMP_RNDN)
+            && !mpfr_ui_pow_ui (tt, 10, mpfr_get_ui (t, GMP_RNDN), GMP_RNDN)
+            && mpfr_cmp (a, tt) == 0)
+          break;
+
+        /* actualisation of the precision */
+        MPFR_ZIV_NEXT (loop, Nt);
+        mpfr_set_prec (t, Nt);
+        mpfr_set_prec (tt, Nt);
+      }
+    MPFR_ZIV_FREE (loop);
+
+    inexact = mpfr_set (r, t, rnd_mode);
+
+    mpfr_clear (t);
+    mpfr_clear (tt);
+  }
+
+  MPFR_SAVE_EXPO_FREE (expo);
+  return mpfr_check_range (r, inexact, rnd_mode);
+}
